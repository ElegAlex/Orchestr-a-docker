# ==========================================
# Stage 1: Dependencies
# ==========================================
FROM node:20-alpine AS deps

WORKDIR /app

# Copier package files
COPY package*.json ./
COPY prisma ./prisma/

# Installer TOUTES les dépendances (dev incluses pour build)
RUN npm ci

# Générer Prisma Client
RUN npx prisma generate

# ==========================================
# Stage 2: Builder
# ==========================================
FROM node:20-alpine AS builder

WORKDIR /app

# Copier node_modules depuis deps
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/prisma ./prisma

# Copier source code
COPY . .

# Build application NestJS
RUN npm run build

# ==========================================
# Stage 3: Production Runner
# ==========================================
FROM node:20-alpine AS runner

WORKDIR /app

# Installer dumb-init (meilleure gestion processus)
RUN apk add --no-cache dumb-init wget

# Créer utilisateur non-root
RUN addgroup -g 1001 -S nodejs && adduser -S nestjs -u 1001

# Copier UNIQUEMENT production dependencies
COPY --from=deps /app/package*.json ./
COPY --from=deps /app/node_modules ./node_modules

# Copier prisma et dist depuis builder
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist

# Passer à utilisateur non-root
USER nestjs

# Exposer port
EXPOSE 4000

# Variables d'environnement par défaut
ENV NODE_ENV=production
ENV PORT=4000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:4000/api/health || exit 1

# Lancer application avec dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main"]
