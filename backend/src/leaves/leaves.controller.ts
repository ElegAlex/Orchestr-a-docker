import {
  Controller,
  Get,
  Post,
  Patch,
  Delete,
  Body,
  Param,
  Query,
  UseGuards,
  Request,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
} from '@nestjs/swagger';
import { LeavesService } from './leaves.service';
import { CreateLeaveDto } from './dto/create-leave.dto';
import { UpdateLeaveDto } from './dto/update-leave.dto';
import { FilterLeaveDto } from './dto/filter-leave.dto';
import { RejectLeaveDto } from './dto/reject-leave.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { GetDepartmentFilter } from '../auth/decorators/department-filter.decorator';
import { Role } from '@prisma/client';

/**
 * Contr√¥leur de gestion des demandes de cong√©s
 *
 * Toutes les routes n√©cessitent une authentification JWT
 * Workflow d'approbation r√©serv√© aux r√¥les: ADMIN, RESPONSABLE, MANAGER
 */
@ApiTags('leaves')
@ApiBearerAuth()
@Controller('leaves')
@UseGuards(JwtAuthGuard, RolesGuard)
export class LeavesController {
  constructor(private readonly leavesService: LeavesService) {}

  /**
   * Cr√©er une nouvelle demande de cong√©
   * Accessible √† tous les utilisateurs authentifi√©s
   */
  @Post()
  @ApiOperation({
    summary: 'Cr√©er une demande de cong√©',
    description: 'Cr√©e une nouvelle demande de cong√© pour l\'utilisateur connect√©',
  })
  @ApiResponse({
    status: 201,
    description: 'Demande cr√©√©e avec succ√®s',
  })
  @ApiResponse({
    status: 400,
    description: 'Donn√©es invalides ou chevauchement d√©tect√©',
  })
  create(@Body() createLeaveDto: CreateLeaveDto, @Request() req) {
    return this.leavesService.create(createLeaveDto, req.user.id);
  }

  /**
   * R√©cup√©rer toutes les demandes de cong√© avec filtrage et pagination
   * üîí Isolation par d√©partement : Les utilisateurs non-ADMIN/RESPONSABLE
   * ne voient que les cong√©s de leur d√©partement
   */
  @Get()
  @ApiOperation({
    summary: 'R√©cup√©rer toutes les demandes de cong√©',
    description:
      'Liste toutes les demandes de cong√© avec possibilit√© de filtrage et pagination',
  })
  @ApiResponse({
    status: 200,
    description: 'Liste des demandes r√©cup√©r√©e avec succ√®s',
  })
  findAll(
    @Query() filterDto: FilterLeaveDto,
    @GetDepartmentFilter() departmentFilter: string | null,
  ) {
    // üîí Si l'utilisateur n'est pas ADMIN/RESPONSABLE, on force le filtre d√©partement
    if (departmentFilter && !filterDto.departmentId) {
      filterDto.departmentId = departmentFilter;
    }
    return this.leavesService.findAll(filterDto);
  }

  /**
   * R√©cup√©rer les statistiques de cong√©s d'un utilisateur
   * Accessible √† tous les utilisateurs authentifi√©s
   */
  @Get('user/:userId/stats')
  @ApiOperation({
    summary: 'Statistiques de cong√©s d\'un utilisateur',
    description:
      'R√©cup√®re les statistiques par statut et type pour un utilisateur',
  })
  @ApiParam({
    name: 'userId',
    description: 'ID de l\'utilisateur',
    example: '502bce39-ae6c-4423-9a07-72dd93c5c544',
  })
  @ApiResponse({
    status: 200,
    description: 'Statistiques r√©cup√©r√©es avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Utilisateur non trouv√©',
  })
  getUserLeaveStats(@Param('userId') userId: string) {
    return this.leavesService.getUserLeaveStats(userId);
  }

  /**
   * R√©cup√©rer une demande par ID
   * Accessible √† tous les utilisateurs authentifi√©s
   */
  @Get(':id')
  @ApiOperation({
    summary: 'R√©cup√©rer une demande de cong√©',
    description: 'R√©cup√®re les d√©tails d\'une demande par son ID',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la demande',
    example: 'uuid-de-la-demande',
  })
  @ApiResponse({
    status: 200,
    description: 'Demande r√©cup√©r√©e avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Demande non trouv√©e',
  })
  findOne(@Param('id') id: string) {
    return this.leavesService.findOne(id);
  }

  /**
   * Mettre √† jour une demande de cong√©
   * BUG-02 FIX: L'utilisateur peut modifier ses propres demandes PENDING
   * ADMIN et RESPONSABLE peuvent modifier toutes les demandes PENDING
   */
  @Patch(':id')
  @ApiOperation({
    summary: 'Mettre √† jour une demande de cong√©',
    description:
      'Met √† jour une demande de cong√©. Uniquement pour les demandes PENDING. L\'utilisateur peut modifier ses propres demandes, ADMIN/RESPONSABLE peuvent tout modifier.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la demande',
    example: 'uuid-de-la-demande',
  })
  @ApiResponse({
    status: 200,
    description: 'Demande mise √† jour avec succ√®s',
  })
  @ApiResponse({
    status: 400,
    description: 'Donn√©es invalides ou demande non modifiable',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√©',
  })
  @ApiResponse({
    status: 404,
    description: 'Demande non trouv√©e',
  })
  update(
    @Param('id') id: string,
    @Body() updateLeaveDto: UpdateLeaveDto,
    @Request() req,
  ) {
    return this.leavesService.update(
      id,
      updateLeaveDto,
      req.user.id,
      req.user.role,
    );
  }

  /**
   * Supprimer une demande de cong√©
   * L'utilisateur peut supprimer ses propres demandes PENDING, ADMIN peut tout supprimer
   */
  @Delete(':id')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Supprimer une demande de cong√©',
    description: 'Supprime une demande. Uniquement pour les demandes PENDING.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la demande',
    example: 'uuid-de-la-demande',
  })
  @ApiResponse({
    status: 200,
    description: 'Demande supprim√©e avec succ√®s',
  })
  @ApiResponse({
    status: 400,
    description: 'Demande non supprimable',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√©',
  })
  @ApiResponse({
    status: 404,
    description: 'Demande non trouv√©e',
  })
  remove(@Param('id') id: string, @Request() req) {
    return this.leavesService.remove(id, req.user.id, req.user.role);
  }

  /**
   * Approuver une demande de cong√©
   * R√¥les autoris√©s: ADMIN, RESPONSABLE, MANAGER
   */
  @Post(':id/approve')
  @Roles(Role.ADMIN, Role.RESPONSABLE, Role.MANAGER)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Approuver une demande de cong√©',
    description:
      'Approuve une demande de cong√© en attente. R√©serv√© aux gestionnaires.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la demande',
    example: 'uuid-de-la-demande',
  })
  @ApiResponse({
    status: 200,
    description: 'Demande approuv√©e avec succ√®s',
  })
  @ApiResponse({
    status: 400,
    description: 'Demande non approuvable',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© : r√¥le insuffisant',
  })
  @ApiResponse({
    status: 404,
    description: 'Demande non trouv√©e',
  })
  approve(@Param('id') id: string, @Request() req) {
    return this.leavesService.approve(id, req.user.id);
  }

  /**
   * Rejeter une demande de cong√©
   * R√¥les autoris√©s: ADMIN, RESPONSABLE, MANAGER
   */
  @Post(':id/reject')
  @Roles(Role.ADMIN, Role.RESPONSABLE, Role.MANAGER)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Rejeter une demande de cong√©',
    description:
      'Rejette une demande de cong√© en attente. R√©serv√© aux gestionnaires.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la demande',
    example: 'uuid-de-la-demande',
  })
  @ApiResponse({
    status: 200,
    description: 'Demande rejet√©e avec succ√®s',
  })
  @ApiResponse({
    status: 400,
    description: 'Demande non rejectable',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© : r√¥le insuffisant',
  })
  @ApiResponse({
    status: 404,
    description: 'Demande non trouv√©e',
  })
  reject(
    @Param('id') id: string,
    @Body() rejectLeaveDto: RejectLeaveDto,
    @Request() req,
  ) {
    return this.leavesService.reject(id, rejectLeaveDto, req.user.id);
  }

  /**
   * Annuler une demande de cong√© approuv√©e
   * R√¥les autoris√©s: ADMIN, RESPONSABLE
   */
  @Post(':id/cancel')
  @Roles(Role.ADMIN, Role.RESPONSABLE)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Annuler une demande de cong√© approuv√©e',
    description:
      'Annule une demande d√©j√† approuv√©e. R√©serv√© aux ADMIN et RESPONSABLE.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la demande',
    example: 'uuid-de-la-demande',
  })
  @ApiResponse({
    status: 200,
    description: 'Demande annul√©e avec succ√®s',
  })
  @ApiResponse({
    status: 400,
    description: 'Demande non annulable',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© : r√¥le insuffisant',
  })
  @ApiResponse({
    status: 404,
    description: 'Demande non trouv√©e',
  })
  cancel(@Param('id') id: string, @Request() req) {
    return this.leavesService.cancel(id, req.user.id);
  }
}
