import {
  Controller,
  Get,
  Post,
  Delete,
  Body,
  Param,
  Query,
  UseGuards,
  Request,
  HttpCode,
  HttpStatus,
  Patch,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
} from '@nestjs/swagger';
import { NotificationsService } from './notifications.service';
import { CreateNotificationDto } from './dto/create-notification.dto';
import { FilterNotificationDto } from './dto/filter-notification.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { GetDepartmentFilter } from '../auth/decorators/department-filter.decorator';
import { Role } from '@prisma/client';

/**
 * Contr√¥leur de gestion des notifications
 *
 * Toutes les routes n√©cessitent une authentification JWT
 * Cr√©ation r√©serv√©e aux ADMIN
 */
@ApiTags('notifications')
@ApiBearerAuth()
@Controller('notifications')
@UseGuards(JwtAuthGuard, RolesGuard)
export class NotificationsController {
  constructor(
    private readonly notificationsService: NotificationsService,
  ) {}

  /**
   * Cr√©er une nouvelle notification
   * R√¥les autoris√©s: ADMIN (cr√©ation syst√®me)
   */
  @Post()
  @Roles(Role.ADMIN)
  @ApiOperation({
    summary: 'Cr√©er une notification',
    description:
      'Cr√©e une nouvelle notification syst√®me. R√©serv√© aux ADMIN.',
  })
  @ApiResponse({
    status: 201,
    description: 'Notification cr√©√©e avec succ√®s',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√© : r√¥le insuffisant',
  })
  @ApiResponse({
    status: 404,
    description: 'Utilisateur non trouv√©',
  })
  create(@Body() createNotificationDto: CreateNotificationDto) {
    return this.notificationsService.create(createNotificationDto);
  }

  /**
   * R√©cup√©rer toutes les notifications avec filtrage et pagination
   * üîí Isolation par d√©partement : Les utilisateurs non-ADMIN/RESPONSABLE
   * ne voient que les notifications de leur d√©partement
   */
  @Get()
  @ApiOperation({
    summary: 'R√©cup√©rer toutes les notifications',
    description:
      'Liste toutes les notifications avec possibilit√© de filtrage et pagination',
  })
  @ApiResponse({
    status: 200,
    description: 'Liste des notifications r√©cup√©r√©e avec succ√®s',
  })
  findAll(
    @Query() filterDto: FilterNotificationDto,
    @GetDepartmentFilter() departmentFilter: string | null,
  ) {
    // üîí Si l'utilisateur n'est pas ADMIN/RESPONSABLE, on force le filtre d√©partement
    if (departmentFilter && !filterDto.departmentId) {
      filterDto.departmentId = departmentFilter;
    }
    return this.notificationsService.findAll(filterDto);
  }

  /**
   * R√©cup√©rer le nombre de notifications non lues
   * Accessible √† tous les utilisateurs authentifi√©s
   */
  @Get('unread/count')
  @ApiOperation({
    summary: 'Nombre de notifications non lues',
    description: 'R√©cup√®re le nombre de notifications non lues de l\'utilisateur connect√©',
  })
  @ApiResponse({
    status: 200,
    description: 'Nombre r√©cup√©r√© avec succ√®s',
  })
  getUnreadCount(@Request() req) {
    return this.notificationsService.getUnreadCount(req.user.id);
  }

  /**
   * R√©cup√©rer une notification par ID
   * Accessible √† tous les utilisateurs authentifi√©s
   */
  @Get(':id')
  @ApiOperation({
    summary: 'R√©cup√©rer une notification',
    description: 'R√©cup√®re les d√©tails d\'une notification par son ID',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la notification',
    example: 'uuid-de-la-notification',
  })
  @ApiResponse({
    status: 200,
    description: 'Notification r√©cup√©r√©e avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Notification non trouv√©e',
  })
  findOne(@Param('id') id: string) {
    return this.notificationsService.findOne(id);
  }

  /**
   * Marquer une notification comme lue
   * L'utilisateur peut marquer ses propres notifications, ADMIN peut tout marquer
   */
  @Patch(':id/read')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Marquer une notification comme lue',
    description:
      'Marque une notification comme lue. R√©serv√© au destinataire ou ADMIN.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la notification',
    example: 'uuid-de-la-notification',
  })
  @ApiResponse({
    status: 200,
    description: 'Notification marqu√©e comme lue',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√©',
  })
  @ApiResponse({
    status: 404,
    description: 'Notification non trouv√©e',
  })
  markAsRead(@Param('id') id: string, @Request() req) {
    return this.notificationsService.markAsRead(
      id,
      req.user.id,
      req.user.role,
    );
  }

  /**
   * Marquer une notification comme non lue
   * L'utilisateur peut marquer ses propres notifications, ADMIN peut tout marquer
   */
  @Patch(':id/unread')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Marquer une notification comme non lue',
    description:
      'Marque une notification comme non lue. R√©serv√© au destinataire ou ADMIN.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la notification',
    example: 'uuid-de-la-notification',
  })
  @ApiResponse({
    status: 200,
    description: 'Notification marqu√©e comme non lue',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√©',
  })
  @ApiResponse({
    status: 404,
    description: 'Notification non trouv√©e',
  })
  markAsUnread(@Param('id') id: string, @Request() req) {
    return this.notificationsService.markAsUnread(
      id,
      req.user.id,
      req.user.role,
    );
  }

  /**
   * Marquer toutes les notifications comme lues
   * Accessible √† tous les utilisateurs authentifi√©s
   */
  @Post('mark-all-read')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Marquer toutes les notifications comme lues',
    description:
      'Marque toutes les notifications non lues de l\'utilisateur connect√© comme lues',
  })
  @ApiResponse({
    status: 200,
    description: 'Notifications marqu√©es comme lues',
  })
  markAllAsRead(@Request() req) {
    return this.notificationsService.markAllAsRead(req.user.id);
  }

  /**
   * Supprimer une notification
   * L'utilisateur peut supprimer ses propres notifications, ADMIN peut tout supprimer
   */
  @Delete(':id')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Supprimer une notification',
    description: 'Supprime une notification. R√©serv√© au destinataire ou ADMIN.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID de la notification',
    example: 'uuid-de-la-notification',
  })
  @ApiResponse({
    status: 200,
    description: 'Notification supprim√©e avec succ√®s',
  })
  @ApiResponse({
    status: 403,
    description: 'Acc√®s refus√©',
  })
  @ApiResponse({
    status: 404,
    description: 'Notification non trouv√©e',
  })
  remove(@Param('id') id: string, @Request() req) {
    return this.notificationsService.remove(id, req.user.id, req.user.role);
  }

  /**
   * Supprimer toutes les notifications lues
   * Accessible √† tous les utilisateurs authentifi√©s
   */
  @Delete('read/all')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Supprimer toutes les notifications lues',
    description:
      'Supprime toutes les notifications lues de l\'utilisateur connect√©',
  })
  @ApiResponse({
    status: 200,
    description: 'Notifications supprim√©es avec succ√®s',
  })
  removeAllRead(@Request() req) {
    return this.notificationsService.removeAllRead(req.user.id);
  }
}
