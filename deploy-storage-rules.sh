#!/bin/bash

# Script pour d√©ployer les r√®gles Storage Firebase

echo "üî• D√©ploiement des r√®gles Firebase Storage..."

# Utiliser l'API REST Firebase pour d√©ployer les r√®gles
PROJECT_ID="orchestr-a-3b48e"
ACCESS_TOKEN=$(firebase auth:print-access-token)

if [ -z "$ACCESS_TOKEN" ]; then
    echo "‚ùå Erreur: Impossible d'obtenir le token d'acc√®s Firebase"
    echo "Ex√©cutez: firebase login"
    exit 1
fi

echo "‚úÖ Token d'acc√®s obtenu"

# Lire le fichier de r√®gles
RULES_CONTENT=$(cat storage.rules)

# Cr√©er le payload JSON
PAYLOAD=$(cat <<EOF
{
  "source": {
    "files": [
      {
        "content": $(echo "$RULES_CONTENT" | jq -R -s .),
        "name": "storage.rules"
      }
    ]
  }
}
EOF
)

echo "üì§ Envoi des r√®gles √† Firebase..."

# D√©ployer les r√®gles via l'API REST
RESPONSE=$(curl -s -X POST \
  "https://firebaserules.googleapis.com/v1/projects/$PROJECT_ID/rulesets" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$PAYLOAD")

echo "üì• R√©ponse: $RESPONSE"

# Extraire l'ID du ruleset
RULESET_NAME=$(echo "$RESPONSE" | jq -r '.name // empty')

if [ -z "$RULESET_NAME" ]; then
    echo "‚ùå Erreur lors de la cr√©ation du ruleset"
    echo "$RESPONSE"
    exit 1
fi

echo "‚úÖ Ruleset cr√©√©: $RULESET_NAME"

# Publier le ruleset
echo "üìã Publication du ruleset..."

RELEASE_PAYLOAD=$(cat <<EOF
{
  "name": "projects/$PROJECT_ID/releases/firebase.storage/$PROJECT_ID.firebasestorage.app",
  "rulesetName": "$RULESET_NAME"
}
EOF
)

RELEASE_RESPONSE=$(curl -s -X PATCH \
  "https://firebaserules.googleapis.com/v1/projects/$PROJECT_ID/releases/firebase.storage/$PROJECT_ID.firebasestorage.app" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$RELEASE_PAYLOAD")

echo "üì• R√©ponse publication: $RELEASE_RESPONSE"

echo "üéâ R√®gles Storage d√©ploy√©es avec succ√®s!"