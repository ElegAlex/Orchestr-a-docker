rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // =============================================================================
    // RÈGLES DE SÉCURITÉ PRODUCTION - Orchestr'A
    // Dernière mise à jour: 2025-10-02
    // =============================================================================

    // ===========================
    // FONCTIONS UTILITAIRES
    // ===========================

    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur est propriétaire
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    // Fonction pour vérifier si l'utilisateur est responsable
    function isResponsable() {
      return request.auth != null && request.auth.token.role == 'responsable';
    }

    // Fonction pour vérifier si l'utilisateur peut gérer les utilisateurs (admin ou responsable)
    function canManageUsers() {
      return isAdmin() || isResponsable();
    }

    // Fonction pour vérifier si l'utilisateur est manager
    function isManager() {
      return request.auth != null &&
             (request.auth.token.role == 'manager' ||
              request.auth.token.role == 'admin' ||
              request.auth.token.role == 'responsable');
    }

    // Fonction pour vérifier si l'utilisateur est membre d'une équipe projet
    function isProjectMember(projectId) {
      return exists(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid));
    }

    // ===========================
    // FONCTIONS RACI (NOUVEAU)
    // ===========================

    // Vérifie si l'utilisateur est dans le tableau responsible[]
    function isResponsibleFor(task) {
      return request.auth != null &&
             task.responsible is list &&
             request.auth.uid in task.responsible;
    }

    // Vérifie si l'utilisateur est dans le tableau accountable[]
    function isAccountableFor(task) {
      return request.auth != null &&
             task.accountable is list &&
             request.auth.uid in task.accountable;
    }

    // Vérifie si l'utilisateur est dans le tableau consulted[]
    function isConsultedFor(task) {
      return request.auth != null &&
             task.consulted is list &&
             request.auth.uid in task.consulted;
    }

    // Vérifie si l'utilisateur est dans le tableau informed[]
    function isInformedFor(task) {
      return request.auth != null &&
             task.informed is list &&
             request.auth.uid in task.informed;
    }

    // Vérifie si l'utilisateur a un rôle RACI (R, A, C ou I)
    function hasRACIRole(task) {
      return isResponsibleFor(task) ||
             isAccountableFor(task) ||
             isConsultedFor(task) ||
             isInformedFor(task);
    }

    // Vérifie si l'utilisateur peut modifier la tâche (R ou A peuvent modifier)
    function canModifyTask(task) {
      return isResponsibleFor(task) || isAccountableFor(task);
    }

    // ===========================
    // COLLECTIONS
    // ===========================

    // Collection users - Profils utilisateurs
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isOwner(userId) || canManageUsers());
      allow update: if isAuthenticated() && (
        // Seuls admin et responsable peuvent modifier les rôles
        (request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) && canManageUsers()) ||
        // L'utilisateur peut modifier ses propres données (sauf le rôle)
        (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
        // Les managers peuvent modifier certains champs (sauf le rôle)
        (isManager() && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
        // Permettre modification des affectations services/départements par utilisateurs authentifiés (sauf le rôle)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['serviceIds', 'serviceId', 'departmentId', 'updatedAt']) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']))
      );
      allow delete: if canManageUsers();

      // Sous-collection skills des utilisateurs
      match /skills/{skillId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && (isOwner(userId) || isManager());
        allow update: if isAuthenticated() && (isOwner(userId) || isManager());
        allow delete: if isAuthenticated() && (isOwner(userId) || isManager());
      }
    }

    // Collection projects - Projets
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isProjectMember(projectId) || isManager());
      allow delete: if isManager();

      // Sous-collection members des projets
      match /members/{memberId} {
        allow read: if isAuthenticated() && (isProjectMember(projectId) || isManager());
        allow write: if isAuthenticated() && (isProjectMember(projectId) || isManager());
      }
    }

    // Collection tasks - Tâches (AVEC SUPPORT RACI)
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Support RACI: Responsible et Accountable peuvent modifier
        canModifyTask(resource.data) ||
        // Rétrocompatibilité: ancien champ assigneeId
        isOwner(resource.data.assigneeId) ||
        // Créateur peut modifier
        isOwner(resource.data.createdBy) ||
        // Manager peut modifier
        isManager()
      );
      allow delete: if isAuthenticated() && (
        // Accountable peut supprimer
        isAccountableFor(resource.data) ||
        // Créateur peut supprimer
        isOwner(resource.data.createdBy) ||
        // Manager peut supprimer
        isManager()
      );
    }

    // Collection simpleTasks - Tâches simples (AVEC SUPPORT RACI)
    match /simpleTasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Support RACI complet
        canModifyTask(resource.data) ||
        isOwner(resource.data.createdBy) ||
        isManager()
      );
      allow delete: if isAuthenticated() && (
        isAccountableFor(resource.data) ||
        isOwner(resource.data.createdBy) ||
        isManager()
      );
    }

    // Collection comments - Commentaires
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
    }

    // Collection documents - Documents
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.uploadedBy) || isManager());
      allow delete: if isAuthenticated() && (isOwner(resource.data.uploadedBy) || isManager());
    }

    // Collection notifications - Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid);
      allow delete: if isAuthenticated() && (resource.data.userId == request.auth.uid);
    }

    // Collection userCapacities - Capacités utilisateurs mises en cache
    match /userCapacities/{capacityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isManager());
      allow delete: if isManager();
    }

    // Collection resourceAllocations - Allocations de ressources
    match /resourceAllocations/{allocationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isManager());
      allow delete: if isManager();
    }

    // Collection activities - Journal d'activités
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection timeEntries - Entrées de temps
    match /timeEntries/{entryId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
    }

    // Collection leaves - Demandes de congés
    match /leaves/{leaveId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
    }

    // Collection leaveRequests - Nouvelles demandes de congés
    match /leaveRequests/{leaveId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
    }

    // Collection leaveBalances - Soldes de congés
    match /leaveBalances/{balanceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // Permettre aux utilisateurs de mettre à jour leur propre solde, ou aux managers
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isManager());
      allow delete: if isManager();
    }

    // Collection approvalSteps - Étapes de validation
    match /approvalSteps/{stepId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection holidays - Jours fériés
    match /holidays/{holidayId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection schoolHolidays - Congés scolaires
    match /schoolHolidays/{schoolHolidayId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection workContracts - Contrats de travail
    match /workContracts/{contractId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection teams - Équipes
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection reports - Rapports
    match /reports/{reportId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.generatedBy) || isManager());
      allow delete: if isManager();
    }

    // Collection webhooks - Webhooks
    match /webhooks/{webhookId} {
      allow read: if isManager();
      allow write: if isAdmin();
    }

    // Collection webhook_logs - Logs webhooks
    match /webhook_logs/{logId} {
      allow read: if isManager();
      allow create: if true; // Créé par les Cloud Functions
      allow update: if true; // Mis à jour par les Cloud Functions
      allow delete: if isAdmin();
    }

    // Collection sessions - Sessions utilisateurs
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // Collection risks - Risques projet
    match /risks/{riskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isProjectMember(resource.data.projectId) || isManager());
      allow delete: if isManager();
    }

    // Collection services - Services organisationnels
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection departments - Départements organisationnels
    match /departments/{departmentId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection skills - Compétences
    match /skills/{skillId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection validation_requests - Demandes de validation workflow
    match /validation_requests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.assigneeId) ||
        isOwner(resource.data.requestedBy) ||
        isManager()
      );
      allow delete: if isManager();
    }

    // Collection workflows - Définitions de workflow
    match /workflows/{workflowId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection workflow_instances - Instances d'exécution de workflows
    match /workflow_instances/{instanceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.createdBy) ||
        isManager()
      );
      allow delete: if isManager();
    }

    // Collection remoteWorkSchedules - Plannings de télétravail hebdomadaires
    match /remoteWorkSchedules/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (request.auth.uid == userId || isManager());
      allow update: if isAuthenticated() && (request.auth.uid == userId || isManager());
      allow delete: if isManager();
    }

    // Collection remoteWorkDays - Jours spécifiques de télétravail
    match /remoteWorkDays/{dayId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (request.resource.data.userId == request.auth.uid || isManager());
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isManager());
      allow delete: if isAuthenticated() && (resource.data.userId == request.auth.uid || isManager());
    }

    // Collection userTeleworkProfiles - Profils télétravail des utilisateurs
    match /userTeleworkProfiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (request.auth.uid == userId || isManager());
      allow update: if isAuthenticated() && (request.auth.uid == userId || isManager());
      allow delete: if isManager();
    }

    // Collection teleworkOverrides - Exceptions télétravail
    match /teleworkOverrides/{overrideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (request.resource.data.userId == request.auth.uid || isManager());
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isManager());
      allow delete: if isAuthenticated() && (resource.data.userId == request.auth.uid || isManager());
    }

    // Collection teamTeleworkRules - Règles télétravail d'équipe
    match /teamTeleworkRules/{ruleId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    // Collection teleworkSystemConfig - Configuration système télétravail
    match /teleworkSystemConfig/{configId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Collection milestones - Jalons
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.ownerId) ||
        isManager()
      );
      allow delete: if isManager();
    }

    // Collection epics - Epics
    match /epics/{epicId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.ownerId) ||
        isManager()
      );
      allow delete: if isManager();
    }

    // Collection personalTodos - To-dos personnelles
    match /personalTodos/{todoId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Règle par défaut - Refuser tout accès non explicitement autorisé
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
