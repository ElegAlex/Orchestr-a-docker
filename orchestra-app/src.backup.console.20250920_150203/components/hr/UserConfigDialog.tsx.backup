import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Avatar,
  Stack,
  FormControlLabel,
  Switch,
  Tabs,
  Tab,
  Alert,
  IconButton,
  Divider,
} from '@mui/material';
import {
  Close as CloseIcon,
  Business as BusinessIcon,
  Schedule as ScheduleIcon,
  BeachAccess as BeachAccessIcon,
  Home as HomeIcon,
} from '@mui/icons-material';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { 
  User, 
  WorkContract, 
  ContractType, 
  WeekDay,
  DailySchedule,
} from '../../types';
import { capacityService } from '../../services/capacity.service';
import { LeaveDeclarationTab } from './LeaveDeclarationTab';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel({ children, value, index }: TabPanelProps) {
  return (
    <div role="tabpanel" hidden={value !== index}>
      {value === index && <Box>{children}</Box>}
    </div>
  );
}

interface UserConfigDialogProps {
  open: boolean;
  onClose: () => void;
  user: User | null;
  contract: WorkContract | null;
  onSave: (contract: Partial<WorkContract>) => Promise<void>;
}

const WEEK_DAYS: { value: WeekDay; label: string }[] = [
  { value: 'monday', label: 'Lundi' },
  { value: 'tuesday', label: 'Mardi' },
  { value: 'wednesday', label: 'Mercredi' },
  { value: 'thursday', label: 'Jeudi' },
  { value: 'friday', label: 'Vendredi' },
  { value: 'saturday', label: 'Samedi' },
  { value: 'sunday', label: 'Dimanche' },
];

const CONTRACT_TYPES: { value: ContractType; label: string; color: any }[] = [
  { value: 'CDI', label: 'Contrat √† Dur√©e Ind√©termin√©e', color: 'success' },
  { value: 'CDD', label: 'Contrat √† Dur√©e D√©termin√©e', color: 'warning' },
  { value: 'FREELANCE', label: 'Freelance', color: 'info' },
  { value: 'INTERN', label: 'Stage', color: 'secondary' },
  { value: 'PART_TIME', label: 'Temps Partiel', color: 'primary' },
];

export const UserConfigDialog: React.FC<UserConfigDialogProps> = ({
  open,
  onClose,
  user,
  contract,
  onSave,
}) => {
  const [tabValue, setTabValue] = useState(0);
  const [saving, setSaving] = useState(false);
  const [contractForm, setContractForm] = useState<Partial<WorkContract>>({});

  // Initialiser le formulaire quand le dialog s'ouvre
  useEffect(() => {
    if (open && user) {
      if (contract) {
        setContractForm({
          ...contract,
        });
      } else {
        // Contrat par d√©faut
        setContractForm({
          userId: user.id,
          type: 'CDI',
          workingTimePercentage: 100,
          weeklyHours: 35,
          workingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],
          startDate: new Date(),
          paidLeaveDays: 25,
          isRemoteAllowed: false,
        });
      }
    }
  }, [open, user, contract]);

  const handleSave = async () => {
    if (!user || !contractForm.userId) return;

    try {
      setSaving(true);
      await onSave(contractForm);
      onClose();
    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
    } finally {
      setSaving(false);
    }
  };

  const handleWorkingDayToggle = (day: WeekDay, checked: boolean) => {
    const currentDays = contractForm.workingDays || [];
    const newDays = checked
      ? [...currentDays, day]
      : currentDays.filter(d => d !== day);
    
    setContractForm({
      ...contractForm,
      workingDays: newDays,
    });
  };

  const calculateWeeklyHoursFromPercentage = (percentage: number) => {
    return Math.round((percentage / 100) * 35); // 35h base
  };

  const calculateRTTDays = (weeklyHours: number) => {
    return weeklyHours > 35 ? Math.round((weeklyHours - 35) * 52 / 7) : 0;
  };

  if (!user) return null;

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      sx={{ '& .MuiDialog-paper': { minHeight: '70vh' } }}
    >
      <DialogTitle>
        <Box display="flex" alignItems="center" justifyContent="space-between">
          <Box display="flex" alignItems="center" gap={2}>
            <Avatar src={user.avatarUrl} sx={{ width: 48, height: 48 }}>
              {user.firstName?.[0]}{user.lastName?.[0]}
            </Avatar>
            <Box>
              <Typography variant="h6">
                Configuration de {user.displayName}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {user.department} ‚Ä¢ {user.email}
              </Typography>
            </Box>
          </Box>
          <IconButton onClick={onClose}>
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent sx={{ px: 0 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider', px: 3 }}>
          <Tabs value={tabValue} onChange={(_, value) => setTabValue(value)}>
            <Tab icon={<BusinessIcon />} label="Contrat" />
            <Tab icon={<ScheduleIcon />} label="Horaires" />
            <Tab icon={<BeachAccessIcon />} label="Cong√©s" />
            <Tab icon={<HomeIcon />} label="T√©l√©travail" />
          </Tabs>
        </Box>

        {/* Onglet Contrat */}
        <TabPanel value={tabValue} index={0}>
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              üìã Informations contractuelles
            </Typography>
            
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth>
                  <InputLabel>Type de contrat</InputLabel>
                  <Select
                    value={contractForm.type || 'CDI'}
                    onChange={(e) => setContractForm({
                      ...contractForm,
                      type: e.target.value as ContractType,
                    })}
                    label="Type de contrat"
                  >
                    {CONTRACT_TYPES.map((type) => (
                      <MenuItem key={type.value} value={type.value}>
                        <Box display="flex" alignItems="center" gap={1}>
                          <Chip label={type.value} size="small" color={type.color} />
                          {type.label}
                        </Box>
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="number"
                  label="Pourcentage temps de travail"
                  value={contractForm.workingTimePercentage || 100}
                  onChange={(e) => {
                    const percentage = Number(e.target.value);
                    setContractForm({
                      ...contractForm,
                      workingTimePercentage: percentage,
                      weeklyHours: calculateWeeklyHoursFromPercentage(percentage),
                    });
                  }}
                  inputProps={{ min: 10, max: 150, step: 5 }}
                  helperText="% du temps plein (100% = 35h/semaine)"
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="number"
                  label="Heures par semaine"
                  value={contractForm.weeklyHours || 35}
                  onChange={(e) => setContractForm({
                    ...contractForm,
                    weeklyHours: Number(e.target.value),
                  })}
                  inputProps={{ min: 1, max: 60 }}
                  helperText="Heures contractuelles hebdomadaires"
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="number"
                  label="Salaire horaire (‚Ç¨)"
                  value={contractForm.hourlyRate || ''}
                  onChange={(e) => setContractForm({
                    ...contractForm,
                    hourlyRate: e.target.value ? Number(e.target.value) : undefined,
                  })}
                  inputProps={{ min: 0, step: 0.5 }}
                  helperText="Optionnel, pour freelances"
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="date"
                  label="Date de d√©but"
                  value={contractForm.startDate ? format(contractForm.startDate, 'yyyy-MM-dd') : ''}
                  onChange={(e) => setContractForm({
                    ...contractForm,
                    startDate: e.target.value ? new Date(e.target.value) : new Date(),
                  })}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="date"
                  label="Date de fin (optionnel)"
                  value={contractForm.endDate ? format(contractForm.endDate, 'yyyy-MM-dd') : ''}
                  onChange={(e) => setContractForm({
                    ...contractForm,
                    endDate: e.target.value ? new Date(e.target.value) : undefined,
                  })}
                  InputLabelProps={{ shrink: true }}
                  helperText="Laisser vide pour CDI"
                />
              </Grid>
            </Grid>
          </Box>
        </TabPanel>

        {/* Onglet Horaires */}
        <TabPanel value={tabValue} index={1}>
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              ‚è∞ Planning hebdomadaire
            </Typography>
            
            <Alert severity="info" sx={{ mb: 3 }}>
              S√©lectionnez les jours de travail pour cette ressource.
            </Alert>

            <Grid container spacing={2}>
              {WEEK_DAYS.map((day) => {
                const isWorking = contractForm.workingDays?.includes(day.value) || false;
                return (
                  <Grid item xs={12} sm={6} md={4} key={day.value}>
                    <Box 
                      sx={{ 
                        p: 2, 
                        border: 1, 
                        borderColor: isWorking ? 'primary.main' : 'divider',
                        borderRadius: 1,
                        bgcolor: isWorking ? 'primary.light' : 'transparent',
                        color: isWorking ? 'primary.contrastText' : 'text.primary',
                      }}
                    >
                      <FormControlLabel
                        control={
                          <Switch
                            checked={isWorking}
                            onChange={(e) => handleWorkingDayToggle(day.value, e.target.checked)}
                            color="primary"
                          />
                        }
                        label={day.label}
                      />
                      {isWorking && (
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                          {Math.round(((contractForm.weeklyHours || 35) / (contractForm.workingDays?.length || 5)))} heures/jour
                        </Typography>
                      )}
                    </Box>
                  </Grid>
                );
              })}
            </Grid>

            <Divider sx={{ my: 3 }} />

            <Box>
              <Typography variant="subtitle1" gutterBottom>
                üìä R√©sum√©
              </Typography>
              <Stack direction="row" spacing={3}>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Jours travaill√©s
                  </Typography>
                  <Typography variant="h6">
                    {contractForm.workingDays?.length || 0} jours/semaine
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Heures par jour
                  </Typography>
                  <Typography variant="h6">
                    {contractForm.workingDays?.length ? 
                      Math.round(((contractForm.weeklyHours || 35) / contractForm.workingDays.length) * 10) / 10 
                      : 0}h
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Total hebdomadaire
                  </Typography>
                  <Typography variant="h6">
                    {contractForm.weeklyHours || 35}h
                  </Typography>
                </Box>
              </Stack>
            </Box>
          </Box>
        </TabPanel>

        {/* Onglet Cong√©s */}
        <TabPanel value={tabValue} index={2}>
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              üèñÔ∏è Configuration des cong√©s
            </Typography>

            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="number"
                  label="Jours de cong√©s pay√©s annuels"
                  value={contractForm.paidLeaveDays || 25}
                  onChange={(e) => setContractForm({
                    ...contractForm,
                    paidLeaveDays: Number(e.target.value),
                  })}
                  inputProps={{ min: 0, max: 50 }}
                  helperText="Nombre de jours de CP par an"
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  type="number"
                  label="Jours de RTT annuels"
                  value={contractForm.rttDays || 0}
                  onChange={(e) => setContractForm({
                    ...contractForm,
                    rttDays: Number(e.target.value),
                  })}
                  inputProps={{ min: 0, max: 30 }}
                  helperText="Nombre de jours de RTT par an"
                />
              </Grid>

              <Grid item xs={12}>
                <Alert severity="info">
                  <Typography variant="body2">
                    Les soldes de cong√©s seront automatiquement calcul√©s en fonction de la date d'embauche et des cong√©s d√©j√† pris.
                    Les RTT sont calcul√©s pour les contrats de plus de 35h/semaine.
                  </Typography>
                </Alert>
              </Grid>

              <Grid item xs={12}>
                <Divider sx={{ my: 2 }} />
                <Typography variant="subtitle1" gutterBottom sx={{ mt: 2 }}>
                  üìä Soldes actuels (lecture seule)
                </Typography>
              </Grid>

              <Grid item xs={12} sm={6}>
                <Box sx={{ p: 2, bgcolor: 'background.paper', borderRadius: 1, border: 1, borderColor: 'divider' }}>
                  <Typography variant="body2" color="text.secondary">
                    Cong√©s pay√©s disponibles
                  </Typography>
                  <Typography variant="h5" color="primary">
                    {contractForm.paidLeaveDays || 25} jours
                  </Typography>
                </Box>
              </Grid>

              <Grid item xs={12} sm={6}>
                <Box sx={{ p: 2, bgcolor: 'background.paper', borderRadius: 1, border: 1, borderColor: 'divider' }}>
                  <Typography variant="body2" color="text.secondary">
                    RTT disponibles
                  </Typography>
                  <Typography variant="h5" color="secondary">
                    {contractForm.rttDays || 0} jours
                  </Typography>
                </Box>
              </Grid>

              <Grid item xs={12}>
                <Divider sx={{ my: 2 }} />
                <LeaveDeclarationTab userId={user.id} contract={contractForm} />
              </Grid>
            </Grid>
          </Box>
        </TabPanel>

        {/* Onglet T√©l√©travail */}
        <TabPanel value={tabValue} index={3}>
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              üè† Configuration t√©l√©travail
            </Typography>

            <Stack spacing={3}>
              <FormControlLabel
                control={
                  <Switch
                    checked={contractForm.isRemoteAllowed || false}
                    onChange={(e) => setContractForm({
                      ...contractForm,
                      isRemoteAllowed: e.target.checked,
                    })}
                  />
                }
                label="Autoriser le t√©l√©travail"
              />

              {contractForm.isRemoteAllowed && (
                <>
                  <TextField
                    type="number"
                    label="Jours t√©l√©travail max par semaine"
                    value={contractForm.maxRemoteDaysPerWeek || ''}
                    onChange={(e) => setContractForm({
                      ...contractForm,
                      maxRemoteDaysPerWeek: e.target.value ? Number(e.target.value) : undefined,
                    })}
                    inputProps={{ min: 1, max: contractForm.workingDays?.length || 5 }}
                    helperText="Nombre maximum de jours en t√©l√©travail"
                    sx={{ maxWidth: 300 }}
                  />

                  <Alert severity="info">
                    <Typography variant="body2">
                      Le t√©l√©travail sera soumis √† validation et planification selon les besoins du service.
                    </Typography>
                  </Alert>
                </>
              )}
            </Stack>
          </Box>
        </TabPanel>
      </DialogContent>

      <DialogActions sx={{ px: 3, py: 2 }}>
        <Button onClick={onClose} disabled={saving}>
          Annuler
        </Button>
        <Button 
          variant="contained" 
          onClick={handleSave} 
          disabled={saving || !contractForm.userId}
        >
          {saving ? 'Sauvegarde...' : 'Enregistrer'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};