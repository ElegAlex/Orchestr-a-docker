import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Stack,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  IconButton,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  Avatar,
  Badge,
  Tooltip,
  Alert,
  CircularProgress,
} from '@mui/material';
import {
  ChevronLeft as ChevronLeftIcon,
  ChevronRight as ChevronRightIcon,
  Today as TodayIcon,
  Event as EventIcon,
  Schedule as ScheduleIcon,
  Group as GroupIcon,
  CalendarMonth as CalendarIcon,
  Timeline as TimelineIcon,
  FilterList as FilterIcon,
  CheckCircle as CheckCircleIcon,
} from '@mui/icons-material';
import { Task } from '../../types';
import { taskService } from '../../services/task.service';
import { 
  format, 
  startOfMonth, 
  endOfMonth, 
  eachDayOfInterval,
  isSameDay,
  isToday,
  addMonths,
  subMonths,
  getDay,
  addDays,
  startOfWeek,
  endOfWeek,
  parseISO,
  isWithinInterval,
} from 'date-fns';
import { fr } from 'date-fns/locale';

interface MultiProjectCalendarProps {
  projects: Array<{
    id: string;
    name: string;
    color?: string;
    status: string;
  }>;
}

interface CalendarTask extends Omit<Task, 'startDate' | 'dueDate'> {
  startDate: Date;
  endDate: Date;
  projectName: string;
  projectColor: string;
}

type ViewMode = 'month' | 'week' | 'timeline';

const MultiProjectCalendar: React.FC<MultiProjectCalendarProps> = ({ projects }) => {
  const [tasks, setTasks] = useState<CalendarTask[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [viewMode, setViewMode] = useState<ViewMode>('month');
  const [selectedProjects, setSelectedProjects] = useState<string[]>([]);
  const [selectedTask, setSelectedTask] = useState<CalendarTask | null>(null);
  const [showFilters, setShowFilters] = useState(false);

  useEffect(() => {
    loadTasks();
  }, [projects, selectedProjects]);

  const loadTasks = async () => {
    try {
      setLoading(true);
      const allTasks: CalendarTask[] = [];
      
      // Charger les tâches de chaque projet
      for (const project of projects) {
        if (selectedProjects.length === 0 || selectedProjects.includes(project.id)) {
          try {
            const projectTasks = await taskService.getTasksByProject(project.id);
            const calendarTasks: CalendarTask[] = projectTasks.map(task => {
              const startDate = task.startDate ? parseISO(task.startDate.toString()) : new Date(task.createdAt);
              const endDate = task.dueDate ? parseISO(task.dueDate.toString()) : addDays(startDate, 1);
              
              return {
                ...task,
                startDate,
                endDate,
                projectName: project.name,
                projectColor: project.color || getProjectColor(project.id),
              };
            });
            allTasks.push(...calendarTasks);
          } catch (error) {
            console.warn(`Erreur lors du chargement des tâches pour ${project.name}:`, error);
          }
        }
      }
      
      setTasks(allTasks.sort((a, b) => a.startDate.getTime() - b.startDate.getTime()));
    } catch (error) {
      console.error('Erreur lors du chargement des tâches:', error);
    } finally {
      setLoading(false);
    }
  };

  const getProjectColor = (projectId: string): string => {
    const colors = ['#2196f3', '#4caf50', '#ff9800', '#f44336', '#9c27b0', '#00bcd4'];
    return colors[Math.abs(projectId.split('').reduce((a, b) => a + b.charCodeAt(0), 0)) % colors.length];
  };

  const getTasksForDate = (date: Date): CalendarTask[] => {
    return tasks.filter(task => {
      return isWithinInterval(date, { start: task.startDate, end: task.endDate });
    });
  };

  const getTasksForWeek = (weekStart: Date): CalendarTask[] => {
    const weekEnd = endOfWeek(weekStart, { locale: fr });
    return tasks.filter(task => {
      return isWithinInterval(task.startDate, { start: weekStart, end: weekEnd }) ||
             isWithinInterval(task.endDate, { start: weekStart, end: weekEnd }) ||
             (task.startDate <= weekStart && task.endDate >= weekEnd);
    });
  };

  const renderMonthView = () => {
    const monthStart = startOfMonth(currentDate);
    const monthEnd = endOfMonth(currentDate);
    const calendarStart = startOfWeek(monthStart, { locale: fr });
    const calendarEnd = endOfWeek(monthEnd, { locale: fr });
    const days = eachDayOfInterval({ start: calendarStart, end: calendarEnd });

    return (
      <Box>
        {/* En-têtes des jours */}
        <Grid container sx={{ mb: 1 }}>
          {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'].map((day) => (
            <Grid item xs key={day} sx={{ textAlign: 'center', py: 1 }}>
              <Typography variant="body2" fontWeight="bold" color="text.secondary">
                {day}
              </Typography>
            </Grid>
          ))}
        </Grid>

        {/* Grille du calendrier */}
        <Grid container spacing={1}>
          {days.map((day) => {
            const dayTasks = getTasksForDate(day);
            const isCurrentMonth = day.getMonth() === currentDate.getMonth();
            const isCurrentDay = isToday(day);

            return (
              <Grid item xs key={day.toISOString()} sx={{ height: 120 }}>
                <Box
                  sx={{
                    height: '100%',
                    border: 1,
                    borderColor: isCurrentDay ? 'primary.main' : 'divider',
                    borderWidth: isCurrentDay ? 2 : 1,
                    borderRadius: 1,
                    p: 1,
                    bgcolor: isCurrentMonth 
                      ? isCurrentDay 
                        ? 'primary.light' 
                        : 'background.paper'
                      : 'grey.50',
                    opacity: isCurrentMonth ? 1 : 0.5,
                    cursor: 'pointer',
                    '&:hover': {
                      bgcolor: isCurrentMonth ? 'grey.50' : 'grey.100',
                    },
                  }}
                >
                  <Typography 
                    variant="caption" 
                    fontWeight={isCurrentDay ? 'bold' : 'normal'}
                    color={isCurrentDay ? 'primary.main' : 'text.primary'}
                  >
                    {format(day, 'd')}
                  </Typography>
                  
                  <Stack spacing={0.5} sx={{ mt: 0.5 }}>
                    {dayTasks.slice(0, 3).map((task, index) => (
                      <Chip
                        key={task.id}
                        label={task.title}
                        size="small"
                        sx={{
                          height: 16,
                          fontSize: '0.6rem',
                          bgcolor: task.projectColor,
                          color: 'white',
                          '& .MuiChip-label': {
                            px: 0.5,
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                          },
                        }}
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedTask(task);
                        }}
                      />
                    ))}
                    {dayTasks.length > 3 && (
                      <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.6rem' }}>
                        +{dayTasks.length - 3} autre(s)
                      </Typography>
                    )}
                  </Stack>
                </Box>
              </Grid>
            );
          })}
        </Grid>
      </Box>
    );
  };

  const renderWeekView = () => {
    const weekStart = startOfWeek(currentDate, { locale: fr });
    const weekDays = eachDayOfInterval({ 
      start: weekStart, 
      end: endOfWeek(weekStart, { locale: fr }) 
    });
    const weekTasks = getTasksForWeek(weekStart);

    return (
      <Box>
        {/* En-têtes des jours */}
        <Grid container sx={{ mb: 2 }}>
          {weekDays.map((day) => (
            <Grid item xs key={day.toISOString()}>
              <Box sx={{ textAlign: 'center', p: 1, borderBottom: 1, borderColor: 'divider' }}>
                <Typography variant="body2" fontWeight="bold">
                  {format(day, 'EEE', { locale: fr })}
                </Typography>
                <Typography 
                  variant="h6" 
                  color={isToday(day) ? 'primary.main' : 'text.primary'}
                  fontWeight={isToday(day) ? 'bold' : 'normal'}
                >
                  {format(day, 'd')}
                </Typography>
              </Box>
            </Grid>
          ))}
        </Grid>

        {/* Tâches de la semaine */}
        <Grid container spacing={1}>
          {weekDays.map((day) => {
            const dayTasks = getTasksForDate(day);
            return (
              <Grid item xs key={day.toISOString()}>
                <Box sx={{ minHeight: 300, border: 1, borderColor: 'divider', borderRadius: 1, p: 1 }}>
                  <Stack spacing={1}>
                    {dayTasks.map((task) => (
                      <Card
                        key={task.id}
                        sx={{
                          cursor: 'pointer',
                          borderLeft: 4,
                          borderLeftColor: task.projectColor,
                          '&:hover': { boxShadow: 2 },
                        }}
                        onClick={() => setSelectedTask(task)}
                      >
                        <CardContent sx={{ p: 1, '&:last-child': { pb: 1 } }}>
                          <Typography variant="caption" fontWeight="bold" noWrap>
                            {task.title}
                          </Typography>
                          <Typography variant="caption" display="block" color="text.secondary">
                            {task.projectName}
                          </Typography>
                          <Typography variant="caption" display="block" color="text.secondary">
                            {format(task.startDate, 'HH:mm')} - {format(task.endDate, 'HH:mm')}
                          </Typography>
                        </CardContent>
                      </Card>
                    ))}
                  </Stack>
                </Box>
              </Grid>
            );
          })}
        </Grid>
      </Box>
    );
  };

  const renderTimelineView = () => {
    const monthStart = startOfMonth(currentDate);
    const monthEnd = endOfMonth(currentDate);
    const monthTasks = tasks.filter(task => 
      isWithinInterval(task.startDate, { start: monthStart, end: monthEnd }) ||
      isWithinInterval(task.endDate, { start: monthStart, end: monthEnd })
    );

    const groupedByProject = monthTasks.reduce((acc, task) => {
      if (!acc[task.projectName]) {
        acc[task.projectName] = [];
      }
      acc[task.projectName].push(task);
      return acc;
    }, {} as Record<string, CalendarTask[]>);

    return (
      <Box>
        {Object.entries(groupedByProject).map(([projectName, projectTasks]) => {
          const projectColor = projectTasks[0]?.projectColor || '#2196f3';
          
          return (
            <Box key={projectName} sx={{ mb: 3 }}>
              <Stack direction="row" spacing={2} alignItems="center" sx={{ mb: 2 }}>
                <Avatar sx={{ bgcolor: projectColor, width: 24, height: 24 }}>
                  <GroupIcon sx={{ fontSize: 16 }} />
                </Avatar>
                <Typography variant="h6">{projectName}</Typography>
                <Chip size="small" label={`${projectTasks.length} tâches`} />
              </Stack>

              <Stack spacing={1}>
                {projectTasks.map((task) => (
                  <Card
                    key={task.id}
                    sx={{
                      cursor: 'pointer',
                      borderLeft: 4,
                      borderLeftColor: projectColor,
                      '&:hover': { boxShadow: 2 },
                    }}
                    onClick={() => setSelectedTask(task)}
                  >
                    <CardContent sx={{ p: 2 }}>
                      <Stack direction="row" justifyContent="space-between" alignItems="start">
                        <Box>
                          <Typography variant="subtitle2" fontWeight="bold">
                            {task.title}
                          </Typography>
                          {task.description && (
                            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                              {task.description}
                            </Typography>
                          )}
                        </Box>
                        
                        <Stack direction="row" spacing={1} alignItems="center">
                          <Chip
                            size="small"
                            label={task.status.replace('_', ' ')}
                            color={
                              task.status === 'DONE' ? 'success' :
                              task.status === 'IN_PROGRESS' ? 'warning' :
                              task.status === 'BLOCKED' ? 'error' : 'default'
                            }
                          />
                          <Typography variant="caption" color="text.secondary">
                            {format(task.startDate, 'dd/MM')} → {format(task.endDate, 'dd/MM')}
                          </Typography>
                        </Stack>
                      </Stack>
                    </CardContent>
                  </Card>
                ))}
              </Stack>
            </Box>
          );
        })}
      </Box>
    );
  };

  const handlePrevious = () => {
    if (viewMode === 'week') {
      setCurrentDate(subMonths(currentDate, 0.25)); // Semaine précédente
    } else {
      setCurrentDate(subMonths(currentDate, 1));
    }
  };

  const handleNext = () => {
    if (viewMode === 'week') {
      setCurrentDate(addMonths(currentDate, 0.25)); // Semaine suivante
    } else {
      setCurrentDate(addMonths(currentDate, 1));
    }
  };

  const handleToday = () => {
    setCurrentDate(new Date());
  };

  const getTaskStats = () => {
    const totalTasks = tasks.length;
    const completedTasks = tasks.filter(t => t.status === 'DONE').length;
    const inProgressTasks = tasks.filter(t => t.status === 'IN_PROGRESS').length;
    const overdueTasks = tasks.filter(t => new Date() > t.endDate && t.status !== 'DONE').length;
    
    return { totalTasks, completedTasks, inProgressTasks, overdueTasks };
  };

  const stats = getTaskStats();

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" py={4}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Card>
      <CardContent>
        {/* Header avec contrôles */}
        <Box sx={{ mb: 3 }}>
          <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
            <Typography variant="h6">
              📅 Calendrier Multi-Projets
            </Typography>
            
            <Stack direction="row" spacing={1} alignItems="center">
              {/* Stats rapides */}
              <Stack direction="row" spacing={1}>
                <Badge badgeContent={stats.totalTasks} color="primary">
                  <EventIcon />
                </Badge>
                <Badge badgeContent={stats.completedTasks} color="success">
                  <CheckCircleIcon />
                </Badge>
                <Badge badgeContent={stats.overdueTasks} color="error">
                  <ScheduleIcon />
                </Badge>
              </Stack>
              
              <Button
                size="small"
                startIcon={<FilterIcon />}
                onClick={() => setShowFilters(true)}
                variant="outlined"
              >
                Filtres
              </Button>
              
              <FormControl size="small" sx={{ minWidth: 100 }}>
                <Select
                  value={viewMode}
                  onChange={(e) => setViewMode(e.target.value as ViewMode)}
                >
                  <MenuItem value="month">Mois</MenuItem>
                  <MenuItem value="week">Semaine</MenuItem>
                  <MenuItem value="timeline">Timeline</MenuItem>
                </Select>
              </FormControl>
            </Stack>
          </Stack>

          {/* Navigation */}
          <Stack direction="row" justifyContent="space-between" alignItems="center">
            <Stack direction="row" spacing={1} alignItems="center">
              <IconButton onClick={handlePrevious} size="small">
                <ChevronLeftIcon />
              </IconButton>
              
              <Typography variant="h5" fontWeight="bold" sx={{ minWidth: 200, textAlign: 'center' }}>
                {viewMode === 'week' 
                  ? `Semaine du ${format(startOfWeek(currentDate, { locale: fr }), 'dd MMM', { locale: fr })}`
                  : format(currentDate, 'MMMM yyyy', { locale: fr })
                }
              </Typography>
              
              <IconButton onClick={handleNext} size="small">
                <ChevronRightIcon />
              </IconButton>
            </Stack>
            
            <Button
              size="small"
              startIcon={<TodayIcon />}
              onClick={handleToday}
              variant="outlined"
            >
              Aujourd'hui
            </Button>
          </Stack>
        </Box>

        {/* Légende des projets */}
        {projects.length > 0 && (
          <Box sx={{ mb: 3 }}>
            <Typography variant="body2" gutterBottom fontWeight="bold">
              Projets :
            </Typography>
            <Stack direction="row" spacing={1} flexWrap="wrap">
              {projects.map((project) => (
                <Chip
                  key={project.id}
                  label={project.name}
                  size="small"
                  sx={{
                    bgcolor: project.color || getProjectColor(project.id),
                    color: 'white',
                  }}
                />
              ))}
            </Stack>
          </Box>
        )}

        {/* Contenu du calendrier */}
        {tasks.length === 0 ? (
          <Alert severity="info">
            Aucune tâche trouvée pour les projets sélectionnés.
          </Alert>
        ) : (
          <Box>
            {viewMode === 'month' && renderMonthView()}
            {viewMode === 'week' && renderWeekView()}
            {viewMode === 'timeline' && renderTimelineView()}
          </Box>
        )}

        {/* Dialog de filtres */}
        <Dialog open={showFilters} onClose={() => setShowFilters(false)} maxWidth="sm" fullWidth>
          <DialogTitle>🔍 Filtres des projets</DialogTitle>
          <DialogContent>
            <Stack spacing={2} sx={{ mt: 1 }}>
              <Typography variant="body2">
                Sélectionnez les projets à afficher :
              </Typography>
              
              <Stack spacing={1}>
                {projects.map((project) => (
                  <Box
                    key={project.id}
                    sx={{
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'space-between',
                      p: 1,
                      border: 1,
                      borderColor: selectedProjects.includes(project.id) ? 'primary.main' : 'divider',
                      borderRadius: 1,
                      cursor: 'pointer',
                      bgcolor: selectedProjects.includes(project.id) ? 'primary.light' : 'transparent',
                    }}
                    onClick={() => {
                      setSelectedProjects(prev => 
                        prev.includes(project.id)
                          ? prev.filter(id => id !== project.id)
                          : [...prev, project.id]
                      );
                    }}
                  >
                    <Stack direction="row" spacing={2} alignItems="center">
                      <Avatar 
                        sx={{ 
                          bgcolor: project.color || getProjectColor(project.id), 
                          width: 24, 
                          height: 24 
                        }}
                      >
                        <GroupIcon sx={{ fontSize: 16 }} />
                      </Avatar>
                      <Typography>{project.name}</Typography>
                    </Stack>
                    
                    <Chip
                      size="small"
                      label={tasks.filter(t => t.projectName === project.name).length}
                      color={selectedProjects.includes(project.id) ? 'primary' : 'default'}
                    />
                  </Box>
                ))}
              </Stack>
              
              <Stack direction="row" spacing={2}>
                <Button
                  variant="outlined"
                  onClick={() => setSelectedProjects([])}
                  fullWidth
                >
                  Tout afficher
                </Button>
                <Button
                  variant="outlined"
                  onClick={() => setSelectedProjects(projects.map(p => p.id))}
                  fullWidth
                >
                  Tout masquer
                </Button>
              </Stack>
            </Stack>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setShowFilters(false)}>Fermer</Button>
          </DialogActions>
        </Dialog>

        {/* Dialog de détail de tâche */}
        <Dialog open={!!selectedTask} onClose={() => setSelectedTask(null)} maxWidth="sm" fullWidth>
          <DialogTitle>📋 Détail de la tâche</DialogTitle>
          <DialogContent>
            {selectedTask && (
              <Stack spacing={2} sx={{ mt: 1 }}>
                <Box>
                  <Typography variant="h6" gutterBottom>
                    {selectedTask.title}
                  </Typography>
                  <Stack direction="row" spacing={1} alignItems="center" sx={{ mb: 2 }}>
                    <Avatar 
                      sx={{ 
                        bgcolor: selectedTask.projectColor, 
                        width: 20, 
                        height: 20 
                      }}
                    >
                      <GroupIcon sx={{ fontSize: 12 }} />
                    </Avatar>
                    <Typography variant="body2" color="text.secondary">
                      {selectedTask.projectName}
                    </Typography>
                  </Stack>
                </Box>
                
                {selectedTask.description && (
                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      {selectedTask.description}
                    </Typography>
                  </Box>
                )}
                
                <Box>
                  <Typography variant="body2" gutterBottom fontWeight="bold">
                    Période :
                  </Typography>
                  <Typography variant="body2">
                    Du {format(selectedTask.startDate, 'dd/MM/yyyy HH:mm', { locale: fr })} au {format(selectedTask.endDate, 'dd/MM/yyyy HH:mm', { locale: fr })}
                  </Typography>
                </Box>
                
                <Box>
                  <Typography variant="body2" gutterBottom fontWeight="bold">
                    Statut :
                  </Typography>
                  <Chip
                    label={selectedTask.status.replace('_', ' ')}
                    color={
                      selectedTask.status === 'DONE' ? 'success' :
                      selectedTask.status === 'IN_PROGRESS' ? 'warning' :
                      selectedTask.status === 'BLOCKED' ? 'error' : 'default'
                    }
                    size="small"
                  />
                </Box>
                
                <Box>
                  <Typography variant="body2" gutterBottom fontWeight="bold">
                    Priorité :
                  </Typography>
                  <Chip
                    label={selectedTask.priority}
                    color={selectedTask.priority === 'P0' ? 'error' : selectedTask.priority === 'P1' ? 'warning' : 'default'}
                    size="small"
                  />
                </Box>
              </Stack>
            )}
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setSelectedTask(null)}>Fermer</Button>
          </DialogActions>
        </Dialog>
      </CardContent>
    </Card>
  );
};

export default MultiProjectCalendar;