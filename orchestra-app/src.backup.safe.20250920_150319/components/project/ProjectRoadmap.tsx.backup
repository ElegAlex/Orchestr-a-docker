import React, { useState, useEffect, useMemo } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  LinearProgress,
  Grid,
  Stack,
  IconButton,
  Paper,
  Alert,
} from '@mui/material';
// Temporary fix: Comment out Timeline components that are causing issues
// import {
//   Timeline,
//   TimelineItem,
//   TimelineOppositeContent,
//   TimelineSeparator,
//   TimelineDot,
//   TimelineConnector,
//   TimelineContent,
// } from '@mui/lab';
import {
  Timeline as TimelineIcon,
  Flag as MilestoneIcon,
  Assignment as EpicIcon,
  CheckCircle as CompletedIcon,
  RadioButtonUnchecked as PendingIcon,
  Warning as WarningIcon,
  Schedule as ScheduleIcon,
  Edit as EditIcon,
} from '@mui/icons-material';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import { Epic, Milestone, EpicStatus, MilestoneStatus } from '../../types';
import { epicService } from '../../services/epic.service';
import { milestoneService } from '../../services/milestone.service';

// Utilitaires pour les statuts (d√©finis en dehors du composant)
const getEpicStatusColor = (status: EpicStatus): "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
  switch (status) {
    case 'completed': return 'success';
    case 'in_progress': return 'primary';
    case 'review': return 'warning';
    case 'cancelled': return 'error';
    default: return 'primary';
  }
};

const getMilestoneStatusColor = (status: MilestoneStatus): "primary" | "secondary" | "error" | "info" | "success" | "warning" => {
  switch (status) {
    case 'completed': return 'success';
    case 'in_progress': return 'primary';
    case 'at_risk': return 'error';
    case 'missed': return 'error';
    default: return 'primary';
  }
};

const getStatusLabel = (status: EpicStatus | MilestoneStatus) => {
  const labels: Record<string, string> = {
    // Epic statuses
    'draft': 'Brouillon',
    'ready': 'Pr√™t',
    'in_progress': 'En cours',
    'review': 'En revue',
    'completed': 'Termin√©',
    'cancelled': 'Annul√©',
    // Milestone statuses
    'upcoming': '√Ä venir',
    'at_risk': '√Ä risque',
    'missed': 'Manqu√©',
  };
  return labels[status] || status;
};

interface ProjectRoadmapProps {
  projectId: string;
  onCreateEpic?: () => void;
  onCreateMilestone?: () => void;
  onEditEpic?: (epic: Epic) => void;
  onEditMilestone?: (milestone: Milestone) => void;
}

interface RoadmapTimelineItem {
  id: string;
  type: 'epic' | 'milestone';
  data: Epic | Milestone;
  date: Date;
  position: number; // Position sur la timeline
}

const ProjectRoadmap: React.FC<ProjectRoadmapProps> = ({
  projectId,
  onCreateEpic,
  onCreateMilestone,
  onEditEpic,
  onEditMilestone,
}) => {
  const [epics, setEpics] = useState<Epic[]>([]);
  const [milestones, setMilestones] = useState<Milestone[]>([]);
  const [loading, setLoading] = useState(true);

  // Chargement des donn√©es
  useEffect(() => {
    const loadRoadmapData = async () => {
      try {
        setLoading(true);
        const [epicsData, milestonesData] = await Promise.all([
          epicService.getProjectEpics(projectId),
          milestoneService.getProjectMilestones(projectId),
        ]);
        
        setEpics(epicsData);
        setMilestones(milestonesData);
      } catch (error) {
        console.error('Error loading roadmap data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadRoadmapData();
  }, [projectId]);

  // Construction de la timeline
  const timelineItems = useMemo(() => {
    const items: RoadmapTimelineItem[] = [];
    
    // Ajouter les epics avec leurs dates
    epics.forEach(epic => {
      if (epic.dueDate || epic.startDate) {
        items.push({
          id: epic.id,
          type: 'epic',
          data: epic,
          date: epic.dueDate || epic.startDate!,
          position: 0,
        });
      }
    });
    
    // Ajouter les milestones
    milestones.forEach(milestone => {
      items.push({
        id: milestone.id,
        type: 'milestone',
        data: milestone,
        date: milestone.dueDate || milestone.startDate || new Date(),
        position: 0,
      });
    });
    
    // Trier par date
    items.sort((a, b) => a.date.getTime() - b.date.getTime());
    
    // Calculer les positions (√©viter les chevauchements)
    items.forEach((item, index) => {
      item.position = index;
    });
    
    return items;
  }, [epics, milestones]);


  const getMilestoneIcon = (milestone: Milestone) => {
    if (milestone.status === 'completed') return <CompletedIcon color="success" />;
    if (milestone.status === 'at_risk' || milestone.status === 'missed') return <WarningIcon color="error" />;
    if (milestone.status === 'in_progress') return <ScheduleIcon color="primary" />;
    return <PendingIcon color="disabled" />;
  };


  // M√©triques du projet
  const projectMetrics = useMemo(() => {
    const totalEpics = epics.length;
    const completedEpics = epics.filter(e => e.status === 'completed').length;
    const totalMilestones = milestones.length;
    const completedMilestones = milestones.filter(m => m.status === 'completed').length;
    const atRiskMilestones = milestones.filter(m => m.status === 'at_risk' || m.status === 'missed').length;
    
    const overallProgress = totalEpics > 0 
      ? Math.round(epics.reduce((sum, e) => sum + (e.progress || 0), 0) / totalEpics)
      : 0;

    return {
      totalEpics,
      completedEpics,
      totalMilestones,
      completedMilestones,
      atRiskMilestones,
      overallProgress,
    };
  }, [epics, milestones]);

  if (loading) {
    return (
      <Box p={3}>
        <LinearProgress />
        <Typography variant="body2" sx={{ mt: 2 }}>
          Chargement de la roadmap...
        </Typography>
      </Box>
    );
  }

  return (
    <Box>
      {/* Header avec m√©triques */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Stack direction="row" justifyContent="space-between" alignItems="flex-start" mb={2}>
          <Box>
            <Typography variant="h5" gutterBottom>
              üó∫Ô∏è Roadmap du Projet
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Visualisation des √©piques et jalons du projet avec leurs d√©pendances
            </Typography>
          </Box>
          
          <Stack direction="row" spacing={1}>
            <Button
              variant="outlined"
              startIcon={<EpicIcon />}
              onClick={onCreateEpic}
              size="small"
            >
              Nouvel Epic
            </Button>
            <Button
              variant="outlined"
              startIcon={<MilestoneIcon />}
              onClick={onCreateMilestone}
              size="small"
            >
              Nouveau Jalon
            </Button>
          </Stack>
        </Stack>

        {/* M√©triques */}
        <Grid container spacing={3} mb={2}>
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4" color="primary">
                  {projectMetrics.totalEpics}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Epics Total
                </Typography>
                <Typography variant="body2" sx={{ mt: 1 }}>
                  {projectMetrics.completedEpics} termin√©s
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4" color="warning.main">
                  {projectMetrics.totalMilestones}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Jalons Total
                </Typography>
                <Typography variant="body2" sx={{ mt: 1 }}>
                  {projectMetrics.completedMilestones} atteints
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4" color="success.main">
                  {projectMetrics.overallProgress}%
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Progression
                </Typography>
                <LinearProgress 
                  variant="determinate" 
                  value={projectMetrics.overallProgress} 
                  sx={{ mt: 1 }}
                />
              </CardContent>
            </Card>
          </Grid>
          
          <Grid item xs={12} sm={6} md={3}>
            <Card variant="outlined">
              <CardContent sx={{ textAlign: 'center', py: 2 }}>
                <Typography variant="h4" color="error.main">
                  {projectMetrics.atRiskMilestones}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Jalons √† Risque
                </Typography>
                {projectMetrics.atRiskMilestones > 0 && (
                  <Chip 
                    label="Attention" 
                    color="error" 
                    size="small" 
                    sx={{ mt: 1 }}
                  />
                )}
              </CardContent>
            </Card>
          </Grid>
        </Grid>

        {projectMetrics.atRiskMilestones > 0 && (
          <Alert severity="warning" sx={{ mb: 2 }}>
            ‚ö†Ô∏è {projectMetrics.atRiskMilestones} jalon(s) n√©cessite(nt) votre attention
          </Alert>
        )}
      </Paper>

      {/* Timeline View */}
      {timelineItems.length === 0 ? (
        <Paper sx={{ p: 6, textAlign: 'center' }}>
          <TimelineIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
          <Typography variant="h6" color="text.secondary" gutterBottom>
            Aucun √©l√©ment sur la roadmap
          </Typography>
          <Typography variant="body2" color="text.secondary" mb={3}>
            Cr√©ez votre premier epic ou jalon pour commencer √† planifier votre projet
          </Typography>
          <Stack direction="row" spacing={2} justifyContent="center">
            <Button variant="contained" startIcon={<EpicIcon />} onClick={onCreateEpic}>
              Cr√©er un Epic
            </Button>
            <Button variant="outlined" startIcon={<MilestoneIcon />} onClick={onCreateMilestone}>
              Cr√©er un Jalon
            </Button>
          </Stack>
        </Paper>
      ) : (
        <Stack spacing={3}>
          {timelineItems.map((item, index) => (
            <Card 
              key={item.id}
              elevation={2}
              sx={{ 
                border: item.type === 'epic' ? '2px solid' : '1px solid',
                borderColor: item.type === 'epic' 
                  ? `${getEpicStatusColor((item.data as Epic).status)}.main`
                  : `${getMilestoneStatusColor((item.data as Milestone).status)}.main`,
              }}
            >
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                  <Box
                    sx={{
                      width: 40,
                      height: 40,
                      borderRadius: '50%',
                      backgroundColor: `${item.type === 'epic' 
                        ? getEpicStatusColor((item.data as Epic).status)
                        : getMilestoneStatusColor((item.data as Milestone).status)}.main`,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: 'white',
                    }}
                  >
                    {item.type === 'epic' ? (
                      <EpicIcon />
                    ) : (
                      getMilestoneIcon(item.data as Milestone)
                    )}
                  </Box>
                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      {format(item.date, 'd MMM yyyy', { locale: fr })}
                    </Typography>
                    <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
                      {format(item.date, 'EEEE', { locale: fr })}
                    </Typography>
                  </Box>
                </Box>
                
                {item.type === 'epic' ? (
                  <EpicCard 
                    epic={item.data as Epic} 
                    onEdit={onEditEpic}
                  />
                ) : (
                  <MilestoneCard 
                    milestone={item.data as Milestone} 
                    onEdit={onEditMilestone}
                  />
                )}
              </CardContent>
            </Card>
          ))}
        </Stack>
      )}
    </Box>
  );
};

// Composant pour afficher un Epic
const EpicCard: React.FC<{ epic: Epic; onEdit?: (epic: Epic) => void }> = ({ epic, onEdit }) => (
  <Box>
    <Stack direction="row" justifyContent="space-between" alignItems="flex-start" mb={2}>
      <Box>
        <Stack direction="row" alignItems="center" spacing={1} mb={1}>
          <Chip
            label={epic.code}
            size="small"
            color="primary"
            variant="outlined"
          />
          <Chip
            label={getStatusLabel(epic.status)}
            size="small"
            color={getEpicStatusColor(epic.status)}
          />
        </Stack>
        <Typography variant="h6" gutterBottom>
          üèîÔ∏è {epic.title}
        </Typography>
        <Typography variant="body2" color="text.secondary" mb={2}>
          {epic.description}
        </Typography>
      </Box>
      
      {onEdit && (
        <IconButton size="small" onClick={() => onEdit(epic)}>
          <EditIcon />
        </IconButton>
      )}
    </Stack>

    <Box mb={2}>
      <Stack direction="row" justifyContent="space-between" alignItems="center" mb={1}>
        <Typography variant="caption" color="text.secondary">
          Progression
        </Typography>
        <Typography variant="caption" fontWeight="bold">
          {epic.progress}%
        </Typography>
      </Stack>
      <LinearProgress variant="determinate" value={epic.progress} />
    </Box>

    <Grid container spacing={2}>
      <Grid item xs={6}>
        <Typography variant="caption" color="text.secondary">
          T√¢ches
        </Typography>
        <Typography variant="body2">
          {epic.completedTaskCount} / {epic.taskCount}
        </Typography>
      </Grid>
      <Grid item xs={6}>
        <Typography variant="caption" color="text.secondary">
          Priorit√©
        </Typography>
        <Chip
          label={epic.priority}
          size="small"
          color={epic.priority === 'P0' ? 'error' : epic.priority === 'P1' ? 'warning' : 'info'}
        />
      </Grid>
    </Grid>
  </Box>
);

// Composant pour afficher un Milestone
const MilestoneCard: React.FC<{ milestone: Milestone; onEdit?: (milestone: Milestone) => void }> = ({ 
  milestone, 
  onEdit 
}) => (
  <Box>
    <Stack direction="row" justifyContent="space-between" alignItems="flex-start" mb={2}>
      <Box>
        <Stack direction="row" alignItems="center" spacing={1} mb={1}>
          <Chip
            label={milestone.code}
            size="small"
            color="warning"
            variant="outlined"
          />
          <Chip
            label={getStatusLabel(milestone.status)}
            size="small"
            color={getMilestoneStatusColor(milestone.status)}
          />
          {milestone.isKeyDate && (
            <Chip
              label="üîí Date cl√©"
              size="small"
              color="error"
              variant="outlined"
            />
          )}
        </Stack>
        <Typography variant="h6" gutterBottom>
          üéØ {milestone.name}
        </Typography>
        <Typography variant="body2" color="text.secondary" mb={2}>
          {milestone.description}
        </Typography>
      </Box>
      
      {onEdit && (
        <IconButton size="small" onClick={() => onEdit(milestone)}>
          <EditIcon />
        </IconButton>
      )}
    </Stack>

    <Box mb={2}>
      <Stack direction="row" justifyContent="space-between" alignItems="center" mb={1}>
        <Typography variant="caption" color="text.secondary">
          Compl√©tion
        </Typography>
        <Typography variant="caption" fontWeight="bold">
          {milestone.completionRate}%
        </Typography>
      </Stack>
      <LinearProgress 
        variant="determinate" 
        value={milestone.completionRate}
        color={getMilestoneStatusColor(milestone.status)}
      />
    </Box>

    <Grid container spacing={2}>
      <Grid item xs={6}>
        <Typography variant="caption" color="text.secondary">
          Type
        </Typography>
        <Typography variant="body2">
          {milestone.type}
        </Typography>
      </Grid>
      <Grid item xs={6}>
        <Typography variant="caption" color="text.secondary">
          Impact
        </Typography>
        <Chip
          label={milestone.impact}
          size="small"
          color={milestone.impact === 'critical' ? 'error' : milestone.impact === 'high' ? 'warning' : 'info'}
        />
      </Grid>
    </Grid>

    {milestone.deliverables && milestone.deliverables.length > 0 && (
      <Box mt={2}>
        <Typography variant="caption" color="text.secondary">
          Livrables ({milestone.deliverables.length})
        </Typography>
        <Stack direction="row" spacing={1} mt={1}>
          {milestone.deliverables.slice(0, 3).map((deliverable) => (
            <Chip
              key={deliverable.id}
              label={deliverable.name}
              size="small"
              color={deliverable.status === 'approved' ? 'success' : 'info'}
              variant="outlined"
            />
          ))}
          {milestone.deliverables.length > 3 && (
            <Chip
              label={`+${milestone.deliverables.length - 3}`}
              size="small"
              variant="outlined"
            />
          )}
        </Stack>
      </Box>
    )}
  </Box>
);

export default ProjectRoadmap;