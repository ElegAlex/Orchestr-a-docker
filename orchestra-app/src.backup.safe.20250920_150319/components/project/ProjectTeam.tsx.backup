import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Avatar,
  Chip,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Stack,
  IconButton,
  Menu,
  LinearProgress,
  Alert,
  Tooltip,
  CircularProgress,
} from '@mui/material';
import {
  Add as AddIcon,
  PersonAdd as PersonAddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  MoreVert as MoreVertIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  Business as BusinessIcon,
  Star as StarIcon,
  StarBorder as StarBorderIcon,
} from '@mui/icons-material';
import { Project, User, TeamMember } from '../../types';
import { userService } from '../../services/user.service';
import { projectService } from '../../services/project.service';
import { Timestamp } from 'firebase/firestore';

interface ProjectTeamProps {
  project: Project;
  onRefresh: () => void;
}

const ProjectTeam: React.FC<ProjectTeamProps> = ({ project, onRefresh }) => {
  const [teamMembers, setTeamMembers] = useState<(User & { role: string; allocation: number })[]>([]);
  const [availableUsers, setAvailableUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [addMemberOpen, setAddMemberOpen] = useState(false);
  const [editMemberOpen, setEditMemberOpen] = useState(false);
  const [selectedMember, setSelectedMember] = useState<TeamMember | null>(null);
  const [selectedUser, setSelectedUser] = useState<string>('');
  // Plus besoin de rôle pour les membres d'équipe
  const [memberAllocation, setMemberAllocation] = useState<number>(100);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedMemberId, setSelectedMemberId] = useState<string | null>(null);

  useEffect(() => {
    loadTeamData();
  }, [project]);

  const loadTeamData = async () => {
    try {
      setLoading(true);
      
      // Charger les membres actuels de l'équipe
      if (project.teamMembers && project.teamMembers.length > 0) {
        const members = await Promise.all(
          project.teamMembers.map(async (member) => {
            try {
              const user = await userService.getUser(member.userId);
              return {
                ...user,
                role: member.role,
                allocation: member.allocationPercentage
              };
            } catch (error) {
              console.error('Erreur lors du chargement du membre:', error);
              return null;
            }
          })
        );
        setTeamMembers(members.filter(Boolean) as any[]);
      }

      // Charger tous les utilisateurs disponibles
      const users = await userService.getAllUsers();
      const currentMemberIds = project.teamMembers?.map(m => m.userId) || [];
      setAvailableUsers(users.filter(user => !currentMemberIds.includes(user.id)));
      
    } catch (error) {
      console.error('Erreur lors du chargement de l\'équipe:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddMember = async () => {
    if (!selectedUser) return;

    try {
      const newMember: TeamMember = {
        userId: selectedUser,
        role: 'member',
        allocationPercentage: memberAllocation,
        startDate: new Date(),
      };

      const updatedProject = {
        ...project,
        teamMembers: [...(project.teamMembers || []), newMember],
        updatedAt: Timestamp.now(),
      };

      // Nettoyer les valeurs undefined pour Firebase
      const cleanProject = Object.fromEntries(
        Object.entries(updatedProject).filter(([_, value]) => value !== undefined)
      );

      await projectService.updateProject(project.id, cleanProject);
      onRefresh();
      
      setAddMemberOpen(false);
      setSelectedUser('');
      setMemberAllocation(100);
    } catch (error) {
      console.error('Erreur lors de l\'ajout du membre:', error);
    }
  };

  const handleEditMember = async () => {
    if (!selectedMember) return;

    try {
      const updatedTeamMembers = project.teamMembers?.map(member =>
        member.userId === selectedMember.userId
          ? { ...member, allocationPercentage: memberAllocation }
          : member
      );

      const updatedProject = {
        ...project,
        teamMembers: updatedTeamMembers,
        updatedAt: Timestamp.now(),
      };

      // Nettoyer les valeurs undefined pour Firebase
      const cleanProject = Object.fromEntries(
        Object.entries(updatedProject).filter(([_, value]) => value !== undefined)
      );

      await projectService.updateProject(project.id, cleanProject);
      onRefresh();
      
      setEditMemberOpen(false);
      setSelectedMember(null);
    } catch (error) {
      console.error('Erreur lors de la modification du membre:', error);
    }
  };

  const handleRemoveMember = async (userId: string) => {
    if (window.confirm('Êtes-vous sûr de vouloir retirer ce membre de l\'équipe ?')) {
      try {
        const updatedTeamMembers = project.teamMembers?.filter(
          member => member.userId !== userId
        );

        const updatedProject = {
          ...project,
          teamMembers: updatedTeamMembers,
          updatedAt: Timestamp.now(),
        };

        // Nettoyer les valeurs undefined pour Firebase
        const cleanProject = Object.fromEntries(
          Object.entries(updatedProject).filter(([_, value]) => value !== undefined)
        );

        await projectService.updateProject(project.id, cleanProject);
        onRefresh();
      } catch (error) {
        console.error('Erreur lors de la suppression du membre:', error);
      }
    }
  };

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, memberId: string) => {
    setAnchorEl(event.currentTarget);
    setSelectedMemberId(memberId);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedMemberId(null);
  };

  const openEditDialog = () => {
    const member = project.teamMembers?.find(m => m.userId === selectedMemberId);
    if (member) {
      setSelectedMember(member);
      setMemberAllocation(member.allocationPercentage);
      setEditMemberOpen(true);
    }
    handleMenuClose();
  };

  // Fonctions de rôles supprimées - plus besoin avec le système RACI par tâche

  const getAllocationColor = (allocation: number) => {
    if (allocation >= 100) return 'error';
    if (allocation >= 80) return 'warning';
    if (allocation >= 50) return 'info';
    return 'success';
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" py={4}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h6">
          Équipe du projet ({teamMembers.length} membre{teamMembers.length !== 1 ? 's' : ''})
        </Typography>
        <Button
          variant="contained"
          startIcon={<PersonAddIcon />}
          onClick={() => setAddMemberOpen(true)}
          disabled={availableUsers.length === 0}
        >
          Ajouter un membre
        </Button>
      </Box>

      {/* Liste des membres */}
      <Grid container spacing={3}>
        {teamMembers.map((member) => (
          <Grid item xs={12} md={6} lg={4} key={member.id}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="flex-start" justifyContent="space-between">
                  <Box display="flex" alignItems="center" gap={2}>
                    <Avatar
                      src={member.avatarUrl}
                      sx={{ width: 56, height: 56 }}
                    >
                      {member.firstName?.[0]}{member.lastName?.[0]}
                    </Avatar>
                    <Box>
                      <Typography variant="h6">
                        {member.displayName}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {member.email}
                      </Typography>
                      {member.department && (
                        <Typography variant="caption" color="text.secondary">
                          {member.department}
                        </Typography>
                      )}
                    </Box>
                  </Box>
                  <IconButton
                    size="small"
                    onClick={(e) => handleMenuClick(e, member.id)}
                  >
                    <MoreVertIcon />
                  </IconButton>
                </Box>

                <Stack spacing={2} sx={{ mt: 2 }}>
                  <Box>
                    <Stack direction="row" spacing={1} flexWrap="wrap">
                      <Chip
                        label={`${member.allocation}% alloué`}
                        size="small"
                        color={getAllocationColor(member.allocation)}
                      />
                    </Stack>
                  </Box>

                  <Box>
                    <Typography variant="caption" color="text.secondary">
                      Allocation
                    </Typography>
                    <LinearProgress
                      variant="determinate"
                      value={Math.min(member.allocation, 100)}
                      color={getAllocationColor(member.allocation)}
                      sx={{ mt: 0.5 }}
                    />
                  </Box>

                  {member.skills && member.skills.length > 0 && (
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        Compétences principales
                      </Typography>
                      <Box display="flex" flexWrap="wrap" gap={0.5} mt={0.5}>
                        {member.skills.slice(0, 3).map((skill, index) => (
                          <Chip
                            key={index}
                            label={skill.name}
                            size="small"
                            variant="outlined"
                            sx={{ fontSize: '0.6rem' }}
                          />
                        ))}
                        {member.skills.length > 3 && (
                          <Chip
                            label={`+${member.skills.length - 3}`}
                            size="small"
                            variant="outlined"
                            sx={{ fontSize: '0.6rem' }}
                          />
                        )}
                      </Box>
                    </Box>
                  )}

                  <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Box display="flex" gap={1}>
                      <Tooltip title="Envoyer un email">
                        <IconButton size="small">
                          <EmailIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Départment">
                        <IconButton size="small">
                          <BusinessIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    </Box>
                    <Box display="flex" alignItems="center">
                      {/* Plus de distinction de rôle - assignations RACI se font par tâche */}
                    </Box>
                  </Box>
                </Stack>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {teamMembers.length === 0 && (
        <Alert severity="info">
          Aucun membre dans l'équipe. Ajoutez des membres pour commencer !
        </Alert>
      )}

      {/* Dialog d'ajout de membre */}
      <Dialog open={addMemberOpen} onClose={() => setAddMemberOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Ajouter un membre à l'équipe</DialogTitle>
        <DialogContent>
          <Stack spacing={3} sx={{ mt: 1 }}>
            <FormControl fullWidth>
              <InputLabel>Utilisateur</InputLabel>
              <Select
                value={selectedUser}
                onChange={(e) => setSelectedUser(e.target.value)}
                label="Utilisateur"
              >
                {availableUsers.map((user) => (
                  <MenuItem key={user.id} value={user.id}>
                    <Box display="flex" alignItems="center" gap={2}>
                      <Avatar src={user.avatarUrl} sx={{ width: 32, height: 32 }}>
                        {user.firstName?.[0]}{user.lastName?.[0]}
                      </Avatar>
                      <Box>
                        <Typography variant="body2">{user.displayName}</Typography>
                        <Typography variant="caption" color="text.secondary">
                          {user.department} • {user.role}
                        </Typography>
                      </Box>
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            {/* Plus de sélection de rôle - les assignations RACI se font maintenant par tâche */}

            <TextField
              fullWidth
              type="number"
              label="Allocation (%)"
              value={memberAllocation}
              onChange={(e) => setMemberAllocation(Number(e.target.value))}
              inputProps={{ min: 1, max: 150 }}
              helperText="Pourcentage de temps alloué au projet"
            />
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAddMemberOpen(false)}>Annuler</Button>
          <Button 
            onClick={handleAddMember} 
            variant="contained"
            disabled={!selectedUser}
          >
            Ajouter
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog d'édition de membre */}
      <Dialog open={editMemberOpen} onClose={() => setEditMemberOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Modifier le membre</DialogTitle>
        <DialogContent>
          <Stack spacing={3} sx={{ mt: 1 }}>
            {/* Plus de sélection de rôle - les assignations RACI se font maintenant par tâche */}

            <TextField
              fullWidth
              type="number"
              label="Allocation (%)"
              value={memberAllocation}
              onChange={(e) => setMemberAllocation(Number(e.target.value))}
              inputProps={{ min: 1, max: 150 }}
              helperText="Pourcentage de temps alloué au projet"
            />
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditMemberOpen(false)}>Annuler</Button>
          <Button 
            onClick={handleEditMember} 
            variant="contained"
          >
            Modifier
          </Button>
        </DialogActions>
      </Dialog>

      {/* Menu contextuël */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={openEditDialog}>
          <EditIcon sx={{ mr: 1 }} />
          Modifier
        </MenuItem>
        <MenuItem
          onClick={() => {
            if (selectedMemberId) {
              handleRemoveMember(selectedMemberId);
            }
            handleMenuClose();
          }}
          sx={{ color: 'error.main' }}
        >
          <DeleteIcon sx={{ mr: 1 }} />
          Retirer de l'équipe
        </MenuItem>
      </Menu>
    </Box>
  );
};

export default ProjectTeam;