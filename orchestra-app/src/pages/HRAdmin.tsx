import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../store';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  Tabs,
  Tab,
  Button,
  Chip,
  Avatar,
  LinearProgress,
  Alert,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Stack,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  TableContainer,
  Paper,
  IconButton,
  Tooltip,
  Badge,
  CircularProgress,
} from '@mui/material';
import {
  Person as PersonIcon,
  Schedule as ScheduleIcon,
  CalendarToday as CalendarIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Cancel as CancelIcon,
  Edit as EditIcon,
  Visibility as VisibilityIcon,
  Add as AddIcon,
  Download as DownloadIcon,
  Upload as UploadIcon,
  Refresh as RefreshIcon,
  Settings as SettingsIcon,
  Delete as DeleteIcon,
} from '@mui/icons-material';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import {
  User,
  WorkContract,
  LeaveRequest,
  Holiday,
  UserCapacity,
  HRMetrics,
  DatePeriod,
  CapacityAlert,
  ContractType,
  LeaveType,
  WeekDay,
} from '../types';
import { holidayService } from '../services/holiday.service';
import { leaveService } from '../services/leave.service';
import LoadingSpinner from '../components/common/LoadingSpinner';
import { capacityService } from '../services/capacity.service';
import { userService } from '../services/user.service';
import { UserConfigDialog } from '../components/hr/UserConfigDialog';
import { LeaveTypesTab } from '../components/hr/LeaveTypesTab';
import { TeamManagementTab } from '../components/resources/TeamManagementTab';
import { SkillsMatrixTab } from '../components/resources/SkillsMatrixTab';
import { SchoolHolidaysTab } from '../components/hr/SchoolHolidaysTab';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div role="tabpanel" hidden={value !== index} {...other}>
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const HRAdmin: React.FC = () => {
  const user = useSelector((state: RootState) => state.auth.user);
  const [tabValue, setTabValue] = useState(0);
  const [loading, setLoading] = useState(true);
  
  // √âtats pour les donn√©es
  const [users, setUsers] = useState<User[]>([]);
  const [holidays, setHolidays] = useState<Holiday[]>([]);
  const [selectedUserContracts, setSelectedUserContracts] = useState<{ [userId: string]: WorkContract }>({});
  const [userLeaves, setUserLeaves] = useState<{ [userId: string]: LeaveRequest[] }>({});
  const [userCapacities, setUserCapacities] = useState<UserCapacity[]>([]);
  
  // √âtats pour les dialogs de param√©trage
  const [userConfigOpen, setUserConfigOpen] = useState(false);
  const [contractDialogOpen, setContractDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [userToDelete, setUserToDelete] = useState<User | null>(null);
  const [deleteDependencies, setDeleteDependencies] = useState<{
    projects: number;
    tasks: number;
    leaves: number;
    contracts: number;
  } | null>(null);
  const [deleteLoading, setDeleteLoading] = useState(false);
  
  // √âtats pour les param√®tres globaux
  const [globalSettings, setGlobalSettings] = useState({
    weeklyHours: 35,
    workingDaysPerWeek: 5,
    hoursPerDay: 7,
    adminEmail: 'rh@orchestr-a.fr',
    leaveValidationDelay: 7,
    reminderDays: 2,
    defaultPaidLeaveDays: 25,
    defaultRttDays: 8,
    defaultExceptionalLeaveDays: 3
  });
  const [settingsLoading, setSettingsLoading] = useState(false);
  const [holidayDialogOpen, setHolidayDialogOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [selectedContract, setSelectedContract] = useState<WorkContract | null>(null);
  
  // √âtats pour les formulaires
  const [contractForm, setContractForm] = useState<Partial<WorkContract>>({});
  
  // P√©riode s√©lectionn√©e
  const [selectedPeriod, setSelectedPeriod] = useState<DatePeriod>(() => {
    const now = new Date();
    return {
      startDate: new Date(now.getFullYear(), now.getMonth(), 1),
      endDate: new Date(now.getFullYear(), now.getMonth() + 1, 0),
      label: format(now, 'MMMM yyyy', { locale: fr }),
    };
  });

  useEffect(() => {
    loadAllData();
  }, [selectedPeriod]);

  const loadAllData = async () => {
    try {
      setLoading(true);
      
      const currentYear = new Date().getFullYear();
      
      const [
        usersData,
        currentYearHolidays,
        nextYearHolidays
      ] = await Promise.all([
        userService.getAllUsersForResources(), // EXCLURE L'ADMIN TECHNIQUE
        holidayService.getHolidaysByYear(currentYear),
        holidayService.getHolidaysByYear(currentYear + 1),
      ]);
      
      const holidaysData = [...currentYearHolidays, ...nextYearHolidays];

      setUsers(usersData);
      setHolidays(holidaysData);

      // Charger les contrats pour tous les utilisateurs en parall√®le
      const contractsData: { [userId: string]: WorkContract } = {};
      console.log('üîÑ [HRAdmin] Chargement des contrats pour', usersData.length, 'utilisateurs...');

      const contractPromises = usersData.map(async (user) => {
        try {
          const contract = await capacityService.getUserContract(user.id);
          contractsData[user.id] = contract;
        } catch (error) {
          const userName = user.displayName || `${user.firstName} ${user.lastName}`;
          console.error(`[HRAdmin] Erreur chargement contrat pour ${userName}:`, error);
        }
      });

      await Promise.all(contractPromises);
      setSelectedUserContracts(contractsData);

      // Charger les cong√©s pour tous les utilisateurs
      const leavesData: { [userId: string]: LeaveRequest[] } = {};
      console.log('üîÑ Chargement des cong√©s pour', usersData.length, 'utilisateurs...');

      const leavesPromises = usersData.map(async (user) => {
        try {
          const userName = user.displayName || `${user.firstName} ${user.lastName}`;
          const leaves = await leaveService.getUserLeaves(user.id);
          // Filtrer pour ne garder que les cong√©s approuv√©s (en cours ou futurs)
          const currentLeaves = leaves.filter(leave =>
            leave.status === 'APPROVED' && new Date(leave.endDate) >= new Date()
          );
          if (currentLeaves.length > 0) {
            leavesData[user.id] = currentLeaves;
            console.log('‚úÖ Cong√©s charg√©s pour', userName, ':', currentLeaves.length);
          }
        } catch (error) {
          const userName = user.displayName || `${user.firstName} ${user.lastName}`;
          console.warn(`‚ùå Erreur cong√©s pour ${userName}:`, error);
        }
      });

      await Promise.all(leavesPromises);
      setUserLeaves(leavesData);
      console.log('üèñÔ∏è Cong√©s charg√©s:', Object.keys(leavesData).length, 'utilisateurs avec cong√©s');

    } catch (error) {
      console.error('Erreur lors du chargement des donn√©es RH:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // NOTE: En mode d√©claratif, plus besoin d'approuver/rejeter les cong√©s
  // Les cong√©s sont automatiquement approuv√©s lors de leur d√©claration
  const handleLeaveAction = async (leaveId: string, action: 'APPROVED' | 'REJECTED', reason?: string) => {
    // Cette fonction n'est plus utilis√©e en mode d√©claratif
    console.log('Mode d√©claratif: les cong√©s sont automatiquement approuv√©s');
  };

  // V√©rifier si l'utilisateur connect√© peut g√©rer un utilisateur donn√©
  const canManageUser = (targetUser: User): boolean => {
    if (!user) return false;

    // Admin et responsable peuvent g√©rer tout le monde
    if (user.role === 'admin' || user.role === 'responsable') {
      return true;
    }

    // Manager peut g√©rer les utilisateurs de ses services
    if (user.role === 'manager') {
      const managerServiceIds = user.serviceIds || [];
      const targetUserServiceIds = targetUser.serviceIds || [];

      // V√©rifier si au moins un service en commun
      return managerServiceIds.some(serviceId =>
        targetUserServiceIds.includes(serviceId)
      );
    }

    return false;
  };

  // Annuler un cong√©
  const handleCancelLeave = async (leaveId: string, userId: string) => {
    if (!window.confirm('√ätes-vous s√ªr de vouloir annuler ce cong√© ?')) {
      return;
    }

    try {
      await leaveService.cancelLeaveRequest(leaveId, userId);
      // Recharger les cong√©s
      await loadAllData();
    } catch (error) {
      console.error('Erreur lors de l\'annulation du cong√©:', error);
      alert('Erreur lors de l\'annulation du cong√©');
    }
  };

  // Gestion des jours f√©ri√©s
  const handleHolidayToggle = async (holidayId: string, isWorkingDay: boolean) => {
    try {
      await holidayService.overrideAsWorkingDay(holidayId, isWorkingDay);
      await loadAllData();
    } catch (error) {
      console.error('Erreur lors de la modification du jour f√©ri√©:', error);
    }
  };

  const handleInitializeHolidays = async (year: number) => {
    try {
      setLoading(true);
      await holidayService.initializeYearHolidays(year);
      await loadAllData();
      
      // Notification de succ√®s
      alert(`Jours f√©ri√©s de l'ann√©e ${year} initialis√©s avec succ√®s !`);
    } catch (error) {
      console.error('Erreur lors de l\'initialisation des jours f√©ri√©s:', error);
      alert(`Erreur lors de l'initialisation des jours f√©ri√©s pour ${year}. V√©rifiez la console pour plus de d√©tails.`);
    } finally {
      setLoading(false);
    }
  };

  // Gestion de la configuration utilisateur
  const handleUserConfigSave = async (contractData: Partial<WorkContract>) => {
    try {
      if (!selectedUser) {
        throw new Error('Aucun utilisateur s√©lectionn√©');
      }

      const isVirtual = capacityService.isVirtualContract(selectedContract);

      if (isVirtual) {
        await capacityService.createContract(selectedUser.id, contractData);
      } else {
        await capacityService.updateContract(selectedContract!.id, contractData);
      }

      await loadAllData();

    } catch (error) {
      console.error('[HRAdmin] Erreur lors de la sauvegarde:', error);
      alert(`Erreur lors de la sauvegarde du contrat: ${error instanceof Error ? error.message : String(error)}`);
      throw error;
    }
  };

  // Gestion de la suppression d'utilisateur
  const handleDeleteClick = async (user: User, event: React.MouseEvent) => {
    event.stopPropagation(); // Emp√™cher l'ouverture du dialog de config
    setUserToDelete(user);
    setDeleteLoading(true);
    
    try {
      const deps = await userService.getUserDependencies(user.id);
      setDeleteDependencies(deps);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des d√©pendances:', error);
      setDeleteDependencies(null);
    } finally {
      setDeleteLoading(false);
      setDeleteDialogOpen(true);
    }
  };

  const handleConfirmDelete = async () => {
    if (!userToDelete) return;
    
    setDeleteLoading(true);
    try {
      // Utiliser la suppression douce (soft delete) pour garder l'historique
      await userService.softDeleteUser(userToDelete.id);
      await loadAllData();
      setDeleteDialogOpen(false);
      setUserToDelete(null);
      setDeleteDependencies(null);
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      alert('Erreur lors de la suppression de l\'utilisateur');
    } finally {
      setDeleteLoading(false);
    }
  };

  // Gestion des param√®tres globaux
  const handleSaveGlobalSettings = async (section: 'workTime' | 'notifications' | 'leaves') => {
    setSettingsLoading(true);
    try {
      // TODO: Impl√©menter la sauvegarde en base de donn√©es
      // Pour l'instant, on simule la sauvegarde
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      alert(`Param√®tres de section "${section}" sauvegard√©s avec succ√®s !`);
    } catch (error) {
      console.error('Erreur lors de la sauvegarde des param√®tres:', error);
      alert('Erreur lors de la sauvegarde des param√®tres');
    } finally {
      setSettingsLoading(false);
    }
  };

  const handleResetGlobalSettings = (section: 'workTime' | 'notifications' | 'leaves') => {
    const defaultSettings = {
      weeklyHours: 35,
      workingDaysPerWeek: 5,
      hoursPerDay: 7,
      adminEmail: 'rh@orchestr-a.fr',
      leaveValidationDelay: 7,
      reminderDays: 2,
      defaultPaidLeaveDays: 25,
      defaultRttDays: 8,
      defaultExceptionalLeaveDays: 3
    };
    
    if (section === 'workTime') {
      setGlobalSettings({
        ...globalSettings,
        weeklyHours: defaultSettings.weeklyHours,
        workingDaysPerWeek: defaultSettings.workingDaysPerWeek,
        hoursPerDay: defaultSettings.hoursPerDay
      });
    } else if (section === 'notifications') {
      setGlobalSettings({
        ...globalSettings,
        adminEmail: defaultSettings.adminEmail,
        leaveValidationDelay: defaultSettings.leaveValidationDelay,
        reminderDays: defaultSettings.reminderDays
      });
    } else if (section === 'leaves') {
      setGlobalSettings({
        ...globalSettings,
        defaultPaidLeaveDays: defaultSettings.defaultPaidLeaveDays,
        defaultRttDays: defaultSettings.defaultRttDays,
        defaultExceptionalLeaveDays: defaultSettings.defaultExceptionalLeaveDays
      });
    }
  };

  // Utilitaires d'affichage
  const getContractTypeColor = (type: ContractType) => {
    switch (type) {
      case 'CDI': return 'success';
      case 'CDD': return 'warning';
      case 'FREELANCE': return 'info';
      case 'INTERN': return 'secondary';
      case 'PART_TIME': return 'primary';
      default: return 'default';
    }
  };

  const getLeaveTypeColor = (type: LeaveType) => {
    switch (type) {
      case 'PAID_LEAVE': return 'primary';
      case 'RTT': return 'secondary';
      case 'SICK_LEAVE': return 'warning';
      case 'MATERNITY_LEAVE': return 'info';
      case 'EXCEPTIONAL_LEAVE': return 'error';
      default: return 'default';
    }
  };

  const getCapacityColor = (capacity: UserCapacity) => {
    if (capacity.overallocationDays && capacity.overallocationDays > 0) return 'error';
    if (capacity.remainingDays < capacity.theoreticalDays * 0.1) return 'warning';
    if (capacity.remainingDays > capacity.theoreticalDays * 0.5) return 'info';
    return 'success';
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress size={60} />
      </Box>
    );
  }

  return (
    <Box>
      {/* Header */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h4" component="h1">
              üë• Administration RH
            </Typography>
            <Stack direction="row" spacing={2}>
              <Button
                variant="outlined"
                startIcon={<RefreshIcon />}
                onClick={loadAllData}
              >
                Actualiser
              </Button>
              <Button
                variant="outlined"
                startIcon={<DownloadIcon />}
              >
                Exporter
              </Button>
            </Stack>
          </Box>
        </CardContent>
      </Card>

      {/* M√©triques simples */}
      <Box sx={{ display: "flex", gap: 3, flexWrap: "wrap" }}>
        <Box>
          <Card>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="primary">
                {users.filter(u => u.isActive).length}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Ressources actives
              </Typography>
            </CardContent>
          </Card>
        </Box>
        
        <Box>
          <Card>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="success.main">
                {Object.keys(selectedUserContracts).length}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Contrats configur√©s
              </Typography>
            </CardContent>
          </Card>
        </Box>
        
        <Box>
          <Card>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="info.main">
                {holidays.length}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Jours f√©ri√©s d√©finis
              </Typography>
            </CardContent>
          </Card>
        </Box>
        
        <Box>
          <Card>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="warning.main">
                {selectedPeriod.startDate.getFullYear()}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Ann√©e en cours
              </Typography>
            </CardContent>
          </Card>
        </Box>
      </Box>

      {/* Onglets principaux */}
      <Card>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange} variant="scrollable" scrollButtons="auto">
            <Tab label="Ressources" />
            <Tab label="Jours f√©ri√©s" />
            <Tab label="Cong√©s scolaires" />
            <Tab label="Types de cong√©s" />
            <Tab label="Param√®tres globaux" />
            <Tab label="Comp√©tences" />
            <Tab label="Skills Matrix" />
          </Tabs>
        </Box>

        {/* Onglet Ressources */}
        <TabPanel value={tabValue} index={0}>
          <Box sx={{ mb: 2 }}>
            <Typography variant="h6" gutterBottom>
              üë• Configuration des Ressources
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Param√©trez les contrats, horaires et cong√©s pour chaque ressource de votre organisation.
            </Typography>
          </Box>

          <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
            {users.map((user) => {
              const contract = selectedUserContracts[user.id];
              return (
                <Box key={user.id} sx={{ width: '100%' }}>
                  <Card 
                    variant="outlined"
                    sx={{ 
                      height: '100%',
                      cursor: 'pointer',
                      '&:hover': { boxShadow: 2 }
                    }}
                    onClick={() => {
                      setSelectedUser(user);
                      setSelectedContract(contract);
                      setUserConfigOpen(true);
                    }}
                  >
                    <CardContent>
                      <Box display="flex" gap={3} alignItems="flex-start">
                      {/* En-t√™te utilisateur */}
                      <Box display="flex" alignItems="center" gap={2} sx={{ minWidth: 250 }}>
                        <Avatar src={user.avatarUrl} sx={{ width: 48, height: 48 }}>
                          {user.firstName?.[0]}{user.lastName?.[0]}
                        </Avatar>
                        <Box>
                          <Typography variant="h6" noWrap>
                            {user.displayName || `${user.firstName} ${user.lastName}`}
                          </Typography>
                          <Typography variant="body2" color="text.secondary" noWrap>
                            {typeof user.department === 'object' && user.department !== null
                              ? user.department.name
                              : user.department || 'D√©partement non d√©fini'}
                          </Typography>
                          <Box display="flex" alignItems="center" gap={1} mt={1}>
                            {user.isActive ? (
                              <Chip label="Actif" size="small" color="success" />
                            ) : (
                              <Chip label="Inactif" size="small" color="default" />
                            )}
                          </Box>
                        </Box>
                      </Box>

                      {/* Informations contrat */}
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="subtitle2" gutterBottom color="text.secondary">
                          üìã Contrat
                        </Typography>
                        {contract ? (
                          <Stack spacing={1}>
                            <Box display="flex" justifyContent="space-between">
                              <Typography variant="body2">Type</Typography>
                              <Chip 
                                label={contract.type} 
                                size="small" 
                                color={getContractTypeColor(contract.type)}
                              />
                            </Box>
                            <Box display="flex" justifyContent="space-between">
                              <Typography variant="body2">Temps de travail</Typography>
                              <Typography variant="body2" fontWeight="bold">
                                {contract.workingTimePercentage}%
                              </Typography>
                            </Box>
                            <Box display="flex" justifyContent="space-between">
                              <Typography variant="body2">Heures/semaine</Typography>
                              <Typography variant="body2">
                                {contract.weeklyHours}h
                              </Typography>
                            </Box>
                            <Box display="flex" justifyContent="space-between">
                              <Typography variant="body2">Jours travaill√©s</Typography>
                              <Typography variant="body2">
                                {contract.workingDays.length} jours
                              </Typography>
                            </Box>
                          </Stack>
                        ) : (
                          <Alert severity="warning">
                            <Typography variant="body2">
                              Contrat non configur√©
                            </Typography>
                          </Alert>
                        )}
                      </Box>

                      {/* Informations cong√©s */}
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="subtitle2" gutterBottom color="text.secondary">
                          üèñÔ∏è Cong√©s
                        </Typography>

                        {/* Param√®tres du contrat */}
                        {contract ? (
                          <Stack spacing={1} sx={{ mb: 1.5 }}>
                            <Box display="flex" justifyContent="space-between">
                              <Typography variant="body2">CP annuels</Typography>
                              <Typography variant="body2" fontWeight="bold">
                                {contract.paidLeaveDays} jours
                              </Typography>
                            </Box>
                            {contract.rttDays && (
                              <Box display="flex" justifyContent="space-between">
                                <Typography variant="body2">RTT annuels</Typography>
                                <Typography variant="body2">
                                  {contract.rttDays} jours
                                </Typography>
                              </Box>
                            )}
                          </Stack>
                        ) : (
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 1.5 }}>
                            Non configur√©
                          </Typography>
                        )}

                        {/* Cong√©s en cours */}
                        {userLeaves[user.id] && userLeaves[user.id].length > 0 ? (
                          <Box>
                            <Typography variant="caption" color="text.secondary" sx={{ mb: 0.5, display: 'block' }}>
                              Cong√©s en cours/√† venir :
                            </Typography>
                            <Stack spacing={0.5}>
                              {userLeaves[user.id].slice(0, 3).map((leave) => (
                                <Box
                                  key={leave.id}
                                  sx={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'space-between',
                                    p: 0.5,
                                    bgcolor: 'success.light',
                                    borderRadius: 1,
                                  }}
                                >
                                  <Stack spacing={0.2} sx={{ flex: 1 }}>
                                    <Typography variant="caption" fontWeight="bold">
                                      {format(new Date(leave.startDate), 'dd/MM', { locale: fr })} - {format(new Date(leave.endDate), 'dd/MM', { locale: fr })}
                                    </Typography>
                                    <Typography variant="caption" color="text.secondary">
                                      {leave.totalDays} jour{leave.totalDays > 1 ? 's' : ''}
                                    </Typography>
                                  </Stack>
                                  {canManageUser(user) && (
                                    <Tooltip title="Annuler ce cong√©">
                                      <IconButton
                                        size="small"
                                        onClick={() => handleCancelLeave(leave.id, user.id)}
                                        sx={{ ml: 0.5 }}
                                      >
                                        <DeleteIcon fontSize="small" />
                                      </IconButton>
                                    </Tooltip>
                                  )}
                                </Box>
                              ))}
                              {userLeaves[user.id].length > 3 && (
                                <Typography variant="caption" color="text.secondary">
                                  +{userLeaves[user.id].length - 3} autre{userLeaves[user.id].length - 3 > 1 ? 's' : ''}
                                </Typography>
                              )}
                            </Stack>
                          </Box>
                        ) : (
                          <Typography variant="caption" color="text.secondary">
                            Aucun cong√© en cours
                          </Typography>
                        )}
                      </Box>

                      {/* T√©l√©travail */}
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="subtitle2" gutterBottom color="text.secondary">
                          üè† T√©l√©travail
                        </Typography>
                        {contract ? (
                          contract.isRemoteAllowed ? (
                            <Stack direction="row" spacing={1} alignItems="center">
                              <Chip label="Autoris√©" size="small" color="info" />
                              {contract.maxRemoteDaysPerWeek && (
                                <Typography variant="caption">
                                  Max {contract.maxRemoteDaysPerWeek}j/sem
                                </Typography>
                              )}
                            </Stack>
                          ) : (
                            <Chip label="Non autoris√©" size="small" color="default" />
                          )
                        ) : (
                          <Typography variant="body2" color="text.secondary">
                            Non configur√©
                          </Typography>
                        )}
                      </Box>

                      {/* Actions */}
                      <Box display="flex" flexDirection="column" gap={1} alignItems="flex-end">
                        <Button
                          variant="outlined"
                          size="small"
                          startIcon={<EditIcon />}
                        >
                          Configurer
                        </Button>
                      </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </Box>
              );
            })}
          </Box>

          {users.length === 0 && (
            <Alert severity="info">
              Aucune ressource trouv√©e. Les utilisateurs appara√Ætront ici une fois cr√©√©s dans le syst√®me.
            </Alert>
          )}
        </TabPanel>

        {/* Onglet Jours f√©ri√©s */}
        <TabPanel value={tabValue} index={1}>
          <Typography variant="h6" gutterBottom>
            üá´üá∑ Gestion des jours f√©ri√©s
          </Typography>

          <Box sx={{ display: "flex", gap: 3, flexWrap: "wrap" }}>
            {/* Section Ann√©e en cours */}
            <Box>
              <Card>
                <CardContent>
                  <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
                    <Typography variant="h6">
                      Ann√©e {new Date().getFullYear()}
                    </Typography>
                    <Button
                      variant="contained"
                      size="small"
                      onClick={() => handleInitializeHolidays(new Date().getFullYear())}
                    >
                      Initialiser {new Date().getFullYear()}
                    </Button>
                  </Box>

                  <TableContainer>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Nom</TableCell>
                          <TableCell>Date</TableCell>
                          <TableCell align="center">Statut</TableCell>
                          <TableCell align="center">Actions</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {holidays
                          .filter(holiday => holiday.date.getFullYear() === new Date().getFullYear())
                          .map((holiday) => (
                          <TableRow key={holiday.id}>
                            <TableCell>{holiday.name}</TableCell>
                            <TableCell>
                              {format(holiday.date, 'dd MMM', { locale: fr })}
                            </TableCell>
                            <TableCell align="center">
                              {holiday.isWorkingDay ? (
                                <Chip label="Ouvr√©" size="small" color="warning" />
                              ) : (
                                <Chip label="F√©ri√©" size="small" color="error" />
                              )}
                            </TableCell>
                            <TableCell align="center">
                              <Button
                                size="small"
                                variant="outlined"
                                onClick={() => handleHolidayToggle(holiday.id, !holiday.isWorkingDay)}
                              >
                                {holiday.isWorkingDay ? 'Rendre f√©ri√©' : 'Rendre ouvr√©'}
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                        {holidays.filter(h => h.date.getFullYear() === new Date().getFullYear()).length === 0 && (
                          <TableRow>
                            <TableCell colSpan={4} align="center">
                              <Alert severity="info">
                                Aucun jour f√©ri√© configur√© pour {new Date().getFullYear()}. 
                                Cliquez sur "Initialiser {new Date().getFullYear()}" pour charger les jours f√©ri√©s.
                              </Alert>
                            </TableCell>
                          </TableRow>
                        )}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Box>

            {/* Section Ann√©e suivante */}
            <Box>
              <Card>
                <CardContent>
                  <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
                    <Typography variant="h6">
                      Ann√©e {new Date().getFullYear() + 1}
                    </Typography>
                    <Button
                      variant="contained"
                      size="small"
                      onClick={() => handleInitializeHolidays(new Date().getFullYear() + 1)}
                    >
                      Initialiser {new Date().getFullYear() + 1}
                    </Button>
                  </Box>

                  <TableContainer>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Nom</TableCell>
                          <TableCell>Date</TableCell>
                          <TableCell align="center">Statut</TableCell>
                          <TableCell align="center">Actions</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {holidays
                          .filter(holiday => holiday.date.getFullYear() === new Date().getFullYear() + 1)
                          .map((holiday) => (
                          <TableRow key={holiday.id}>
                            <TableCell>{holiday.name}</TableCell>
                            <TableCell>
                              {format(holiday.date, 'dd MMM', { locale: fr })}
                            </TableCell>
                            <TableCell align="center">
                              {holiday.isWorkingDay ? (
                                <Chip label="Ouvr√©" size="small" color="warning" />
                              ) : (
                                <Chip label="F√©ri√©" size="small" color="error" />
                              )}
                            </TableCell>
                            <TableCell align="center">
                              <Button
                                size="small"
                                variant="outlined"
                                onClick={() => handleHolidayToggle(holiday.id, !holiday.isWorkingDay)}
                              >
                                {holiday.isWorkingDay ? 'Rendre f√©ri√©' : 'Rendre ouvr√©'}
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                        {holidays.filter(h => h.date.getFullYear() === new Date().getFullYear() + 1).length === 0 && (
                          <TableRow>
                            <TableCell colSpan={4} align="center">
                              <Alert severity="info">
                                Aucun jour f√©ri√© configur√© pour {new Date().getFullYear() + 1}. 
                                Cliquez sur "Initialiser {new Date().getFullYear() + 1}" pour charger les jours f√©ri√©s.
                              </Alert>
                            </TableCell>
                          </TableRow>
                        )}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </Box>
          </Box>
        </TabPanel>

        {/* Onglet Cong√©s scolaires */}
        <TabPanel value={tabValue} index={2}>
          <SchoolHolidaysTab />
        </TabPanel>

        {/* Onglet Types de cong√©s */}
        <TabPanel value={tabValue} index={3}>
          <LeaveTypesTab />
        </TabPanel>

        {/* Onglet Param√®tres globaux */}
        <TabPanel value={tabValue} index={4}>
          <Typography variant="h6" gutterBottom>
            ‚öôÔ∏è Param√®tres globaux RH
          </Typography>

          <Box sx={{ display: "flex", gap: 3, flexWrap: "wrap" }}>

            {/* Section Temps de travail */}
            <Box>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    ‚è∞ Configuration des horaires
                  </Typography>
                  
                  <Stack spacing={2}>
                    <TextField
                      fullWidth
                      label="Heures par semaine (temps plein)"
                      type="number"
                      value={globalSettings.weeklyHours}
                      onChange={(e) => setGlobalSettings({...globalSettings, weeklyHours: Number(e.target.value)})}
                      inputProps={{ min: 32, max: 40 }}
                      helperText="Dur√©e hebdomadaire l√©gale"
                    />
                    
                    <TextField
                      fullWidth
                      label="Jours travaill√©s par semaine"
                      type="number"
                      value={globalSettings.workingDaysPerWeek}
                      onChange={(e) => setGlobalSettings({...globalSettings, workingDaysPerWeek: Number(e.target.value)})}
                      inputProps={{ min: 4, max: 6 }}
                      helperText="Nombre de jours ouvr√©s"
                    />
                    
                    <TextField
                      fullWidth
                      label="Heures par jour"
                      type="number"
                      value={globalSettings.hoursPerDay}
                      onChange={(e) => setGlobalSettings({...globalSettings, hoursPerDay: Number(e.target.value)})}
                      inputProps={{ min: 6, max: 8 }}
                      helperText="Dur√©e journali√®re standard"
                    />
                  </Stack>
                  
                  <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>
                    <Button 
                      variant="contained" 
                      color="primary"
                      onClick={() => handleSaveGlobalSettings('workTime')}
                      disabled={settingsLoading}
                    >
                      {settingsLoading ? 'Sauvegarde...' : 'Enregistrer le temps de travail'}
                    </Button>
                    <Button 
                      variant="outlined"
                      onClick={() => handleResetGlobalSettings('workTime')}
                    >
                      R√©initialiser
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            </Box>

            {/* Section Cong√©s par d√©faut */}
            <Box>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    üèñÔ∏è Cong√©s et RTT par d√©faut
                  </Typography>
                  
                  <Stack spacing={2}>
                    <TextField
                      fullWidth
                      label="Jours de cong√©s pay√©s par an"
                      type="number"
                      value={globalSettings.defaultPaidLeaveDays}
                      onChange={(e) => setGlobalSettings({...globalSettings, defaultPaidLeaveDays: Number(e.target.value)})}
                      inputProps={{ min: 20, max: 35 }}
                      helperText="Cong√©s pay√©s annuels par d√©faut"
                    />
                    
                    <TextField
                      fullWidth
                      label="Jours RTT par an"
                      type="number"
                      value={globalSettings.defaultRttDays}
                      onChange={(e) => setGlobalSettings({...globalSettings, defaultRttDays: Number(e.target.value)})}
                      inputProps={{ min: 0, max: 15 }}
                      helperText="RTT annuels par d√©faut"
                    />
                    
                    <TextField
                      fullWidth
                      label="Jours de cong√©s exceptionnels"
                      type="number"
                      value={globalSettings.defaultExceptionalLeaveDays}
                      onChange={(e) => setGlobalSettings({...globalSettings, defaultExceptionalLeaveDays: Number(e.target.value)})}
                      inputProps={{ min: 0, max: 10 }}
                      helperText="Jours pour √©v√©nements familiaux"
                    />
                  </Stack>
                  
                  <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>
                    <Button 
                      variant="contained" 
                      color="primary"
                      onClick={() => handleSaveGlobalSettings('leaves')}
                      disabled={settingsLoading}
                    >
                      {settingsLoading ? 'Sauvegarde...' : 'Enregistrer les cong√©s'}
                    </Button>
                    <Button 
                      variant="outlined"
                      onClick={() => handleResetGlobalSettings('leaves')}
                    >
                      R√©initialiser
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            </Box>

            {/* Section Notifications */}
            <Box>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    üîî Param√®tres de notification
                  </Typography>
                  
                  <Stack spacing={2}>
                    <TextField
                      fullWidth
                      label="Email admin RH"
                      type="email"
                      value={globalSettings.adminEmail}
                      onChange={(e) => setGlobalSettings({...globalSettings, adminEmail: e.target.value})}
                      helperText="Destinataire des notifications RH"
                    />
                    
                    <TextField
                      fullWidth
                      label="D√©lai de validation cong√©s (jours)"
                      type="number"
                      value={globalSettings.leaveValidationDelay}
                      onChange={(e) => setGlobalSettings({...globalSettings, leaveValidationDelay: Number(e.target.value)})}
                      inputProps={{ min: 1, max: 30 }}
                      helperText="D√©lai max pour valider une demande"
                    />
                    
                    <TextField
                      fullWidth
                      label="Rappel avant √©ch√©ance (jours)"
                      type="number"
                      value={globalSettings.reminderDays}
                      onChange={(e) => setGlobalSettings({...globalSettings, reminderDays: Number(e.target.value)})}
                      inputProps={{ min: 1, max: 7 }}
                      helperText="Notification avant expiration"
                    />
                  </Stack>
                  
                  <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>
                    <Button 
                      variant="contained" 
                      color="primary"
                      onClick={() => handleSaveGlobalSettings('notifications')}
                      disabled={settingsLoading}
                    >
                      {settingsLoading ? 'Sauvegarde...' : 'Enregistrer les notifications'}
                    </Button>
                    <Button 
                      variant="outlined"
                      onClick={() => handleResetGlobalSettings('notifications')}
                    >
                      Tester notification
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            </Box>
          </Box>
        </TabPanel>

        {/* Onglet Contrats */}
        <TabPanel value={tabValue} index={3}>
          <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mb: 2 }}>
            <Typography variant="h6">
              Contrats de travail
            </Typography>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => setContractDialogOpen(true)}
            >
              Nouveau contrat
            </Button>
          </Box>

          <Box sx={{ display: "flex", gap: 2, flexWrap: "wrap" }}>
            {users.slice(0, 12).map((user) => (
              <Box key={user.id}>
                <Card variant="outlined">
                  <CardContent>
                    <Box display="flex" alignItems="center" gap={2} mb={2}>
                      <Avatar src={user.avatarUrl}>
                        {user.firstName?.[0]}{user.lastName?.[0]}
                      </Avatar>
                      <Box>
                        <Typography variant="body1" fontWeight="bold">
                          {user.displayName || `${user.firstName} ${user.lastName}`}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {typeof user.department === 'object' && user.department !== null
                            ? user.department.name
                            : user.department || 'Non d√©fini'}
                        </Typography>
                      </Box>
                    </Box>

                    {/* Contrat par d√©faut - √† remplacer par les vraies donn√©es */}
                    <Stack spacing={1}>
                      <Box display="flex" justifyContent="space-between">
                        <Typography variant="body2" color="text.secondary">Type</Typography>
                        <Chip label="CDI" size="small" color="success" />
                      </Box>
                      <Box display="flex" justifyContent="space-between">
                        <Typography variant="body2" color="text.secondary">Temps</Typography>
                        <Typography variant="body2">100%</Typography>
                      </Box>
                      <Box display="flex" justifyContent="space-between">
                        <Typography variant="body2" color="text.secondary">Heures/sem</Typography>
                        <Typography variant="body2">35h</Typography>
                      </Box>
                    </Stack>

                    <Box display="flex" justifyContent="flex-end" mt={2}>
                      <IconButton size="small">
                        <EditIcon />
                      </IconButton>
                    </Box>
                  </CardContent>
                </Card>
              </Box>
            ))}
          </Box>
        </TabPanel>

        {/* Onglet Comp√©tences */}
        <TabPanel value={tabValue} index={5}>
          <TeamManagementTab />
        </TabPanel>

        {/* Onglet Skills Matrix */}
        <TabPanel value={tabValue} index={6}>
          <SkillsMatrixTab />
        </TabPanel>

        {/* Onglet Capacit√©s (d√©sactiv√© pour l'instant) */}
        <TabPanel value={tabValue} index={7}>
          <Typography variant="h6" gutterBottom>
            Analyse de capacit√© - {selectedPeriod.label}
          </Typography>

          <Box sx={{ display: "flex", gap: 2, flexWrap: "wrap" }}>
            {userCapacities.map((capacity) => {
              const user = users.find(u => u.id === capacity.userId);
              const utilizationRate = capacity.theoreticalDays > 0 
                ? (capacity.plannedDays / capacity.theoreticalDays) * 100 
                : 0;

              return (
                <Box>
                  <Card variant="outlined">
                    <CardContent>
                      <Box display="flex" alignItems="center" gap={2} mb={2}>
                        <Avatar src={user?.avatarUrl}>
                          {user?.firstName?.[0]}{user?.lastName?.[0]}
                        </Avatar>
                        <Box>
                          <Typography variant="body1" fontWeight="bold">
                            {user?.displayName || (user ? `${user.firstName} ${user.lastName}` : 'N/A')}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {Math.round(utilizationRate)}% d'utilisation
                          </Typography>
                        </Box>
                      </Box>

                      <LinearProgress
                        variant="determinate"
                        value={Math.min(utilizationRate, 100)}
                        color={getCapacityColor(capacity)}
                        sx={{ mb: 2 }}
                      />

                      <Box sx={{ display: "flex", gap: 1, flexWrap: "wrap" }}>
                        <Box>
                          <Typography variant="caption" color="text.secondary">
                            Th√©orique
                          </Typography>
                          <Typography variant="body2" fontWeight="bold">
                            {capacity.theoreticalDays.toFixed(1)}j
                          </Typography>
                        </Box>
                        <Box>
                          <Typography variant="caption" color="text.secondary">
                            Disponible
                          </Typography>
                          <Typography variant="body2" fontWeight="bold">
                            {capacity.availableDays.toFixed(1)}j
                          </Typography>
                        </Box>
                        <Box>
                          <Typography variant="caption" color="text.secondary">
                            Planifi√©
                          </Typography>
                          <Typography variant="body2" fontWeight="bold">
                            {capacity.plannedDays.toFixed(1)}j
                          </Typography>
                        </Box>
                        <Box>
                          <Typography variant="caption" color="text.secondary">
                            Restant
                          </Typography>
                          <Typography variant="body2" fontWeight="bold">
                            {capacity.remainingDays.toFixed(1)}j
                          </Typography>
                        </Box>
                      </Box>

                      {capacity.alerts.length > 0 && (
                        <Alert severity={
                          capacity.alerts[0].severity === 'CRITICAL' ? 'error' :
                          capacity.alerts[0].severity === 'HIGH' ? 'warning' : 'info'
                        }>
                          {capacity.alerts[0].message}
                        </Alert>
                      )}
                    </CardContent>
                  </Card>
                </Box>
              );
            })}
          </Box>
        </TabPanel>

      </Card>

      {/* Dialog de configuration utilisateur */}
      <UserConfigDialog
        open={userConfigOpen}
        onClose={() => {
          setUserConfigOpen(false);
          setSelectedUser(null);
          setSelectedContract(null);
        }}
        user={selectedUser}
        contract={selectedContract}
        onSave={handleUserConfigSave}
      />

      {/* Dialog de confirmation de suppression */}
      <Dialog
        open={deleteDialogOpen}
        onClose={() => !deleteLoading && setDeleteDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          ‚ö†Ô∏è Confirmer la suppression
        </DialogTitle>
        <DialogContent>
          {userToDelete && (
            <Box>
              <Alert severity="warning" sx={{ mb: 2 }}>
                Vous √™tes sur le point de d√©sactiver le compte de <strong>{userToDelete.displayName || `${userToDelete.firstName} ${userToDelete.lastName}`}</strong>.
                Cette action est r√©versible mais l'utilisateur ne pourra plus se connecter.
              </Alert>

              {deleteDependencies && (
                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    Impact de la suppression :
                  </Typography>
                  <Box sx={{ display: "flex", gap: 2, flexWrap: "wrap" }}>
                    {deleteDependencies.projects > 0 && (
                      <Box>
                        <Alert severity="info">
                          <Typography variant="body2">
                            <strong>{deleteDependencies.projects}</strong> projet(s) impact√©(s)
                          </Typography>
                        </Alert>
                      </Box>
                    )}
                    {deleteDependencies.tasks > 0 && (
                      <Box>
                        <Alert severity="info">
                          <Typography variant="body2">
                            <strong>{deleteDependencies.tasks}</strong> t√¢che(s) assign√©e(s)
                          </Typography>
                        </Alert>
                      </Box>
                    )}
                    {deleteDependencies.leaves > 0 && (
                      <Box>
                        <Alert severity="info">
                          <Typography variant="body2">
                            <strong>{deleteDependencies.leaves}</strong> demande(s) de cong√©s
                          </Typography>
                        </Alert>
                      </Box>
                    )}
                    {deleteDependencies.contracts > 0 && (
                      <Box>
                        <Alert severity="info">
                          <Typography variant="body2">
                            <strong>{deleteDependencies.contracts}</strong> contrat(s)
                          </Typography>
                        </Alert>
                      </Box>
                    )}
                  </Box>
                </Box>
              )}

              <Typography variant="body2" color="text.secondary">
                Les donn√©es historiques seront conserv√©es pour la tra√ßabilit√©.
                Les t√¢ches assign√©es devront √™tre r√©assign√©es manuellement.
              </Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialogOpen(false)} disabled={deleteLoading}>
            Annuler
          </Button>
          <Button 
            onClick={handleConfirmDelete} 
            color="error" 
            variant="contained"
            disabled={deleteLoading}
          >
            {deleteLoading ? 'Suppression...' : 'Confirmer la suppression'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export { HRAdmin };
export default HRAdmin;