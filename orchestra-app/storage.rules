rules_version = '2';

// =============================================================================
// RÈGLES DE SÉCURITÉ FIREBASE STORAGE - MODULE TÂCHES
// Gestion sécurisée des pièces jointes de tâches
// =============================================================================

service firebase.storage {
  match /b/{bucket}/o {
    
    // =============================================================================
    // PIÈCES JOINTES DE TÂCHES
    // =============================================================================
    match /task-attachments/{fileName} {
      // Lecture : utilisateurs authentifiés uniquement
      // Dans un vrai système, on pourrait ajouter des vérifications de permissions par projet
      allow read: if request.auth != null;
      
      // Écriture : utilisateurs authentifiés seulement
      // Validation des fichiers uploadés
      allow create: if request.auth != null &&
                       isValidFileUpload() &&
                       request.resource.size <= 50 * 1024 * 1024; // 50MB max
      
      // Mise à jour : propriétaire du fichier ou admin
      // (généralement utilisé pour les métadonnées)
      allow update: if request.auth != null &&
                       isValidFileUpdate();
      
      // Suppression : propriétaire du fichier ou admin
      allow delete: if request.auth != null &&
                       (isFileOwner() || isAdmin());
    }

    // =============================================================================
    // AVATARS ET IMAGES DE PROFIL (pour référence future)
    // =============================================================================
    match /user-avatars/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      request.resource.size <= 5 * 1024 * 1024; // 5MB max pour les avatars
    }

    // =============================================================================
    // FONCTIONS DE VALIDATION
    // =============================================================================
    
    function isValidFileUpload() {
      // Types de fichiers autorisés
      let allowedTypes = [
        'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml',
        'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'text/plain', 'text/csv', 'text/markdown',
        'application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed',
        'application/json', 'application/javascript', 'text/html', 'text/css'
      ];
      
      return request.resource.contentType in allowedTypes;
    }
    
    function isValidFileUpdate() {
      // Pour les mises à jour, on vérifie que le type de contenu n'a pas changé
      return resource.contentType == request.resource.contentType;
    }
    
    function isFileOwner() {
      // Dans un système réel, on devrait vérifier dans Firestore qui est le propriétaire
      // Pour l'instant, on autorise tous les utilisateurs authentifiés
      // TODO: Implémenter une vérification croisée avec la collection taskAttachments
      return request.auth != null;
    }
    
    function isAdmin() {
      // Dans un système réel, on devrait vérifier le rôle de l'utilisateur
      // TODO: Implémenter une vérification du rôle admin dans la collection users
      return request.auth != null;
    }
  }
}